//-----------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by the C# SDK Code Generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------------


using System.Threading.Tasks;
using System.Collections.Generic;
using Unity.Services.CloudCode.Authoring.Client.Models;
using Unity.Services.CloudCode.Authoring.Client.Http;
using Unity.Services.CloudCode.Authoring.Client.Default;

namespace Unity.Services.CloudCode.Authoring.Client.Apis.Default
{
    /// <summary>
    /// Interface for the DefaultApiClient
    /// </summary>
    internal interface IDefaultApiClient
    {
            /// <summary>
            /// Async Operation.
            /// Create an anonymous player.
            /// </summary>
            /// <param name="request">Request object for CreateAnonymousPlayer.</param>
            /// <param name="operationConfiguration">Configuration for CreateAnonymousPlayer.</param>
            /// <returns>Task for a Response object containing status code, headers, and CloudCodeCreateAnonymousPlayerResponse object.</returns>
            /// <exception cref="Unity.Services.CloudCode.Authoring.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<CloudCodeCreateAnonymousPlayerResponse>> CreateAnonymousPlayerAsync(Unity.Services.CloudCode.Authoring.Client.Default.CreateAnonymousPlayerRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Create Module.
            /// </summary>
            /// <param name="request">Request object for CreateModule.</param>
            /// <param name="operationConfiguration">Configuration for CreateModule.</param>
            /// <returns>Task for a Response object containing status code, headers, and CloudCodeCreateModuleResponse object.</returns>
            /// <exception cref="Unity.Services.CloudCode.Authoring.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<CloudCodeCreateModuleResponse>> CreateModuleAsync(Unity.Services.CloudCode.Authoring.Client.Default.CreateModuleRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Create Script.
            /// </summary>
            /// <param name="request">Request object for CreateScript.</param>
            /// <param name="operationConfiguration">Configuration for CreateScript.</param>
            /// <returns>Task for a Response object containing status code, headers.</returns>
            /// <exception cref="Unity.Services.CloudCode.Authoring.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response> CreateScriptAsync(Unity.Services.CloudCode.Authoring.Client.Default.CreateScriptRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Delete Module.
            /// </summary>
            /// <param name="request">Request object for DeleteModule.</param>
            /// <param name="operationConfiguration">Configuration for DeleteModule.</param>
            /// <returns>Task for a Response object containing status code, headers.</returns>
            /// <exception cref="Unity.Services.CloudCode.Authoring.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response> DeleteModuleAsync(Unity.Services.CloudCode.Authoring.Client.Default.DeleteModuleRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Delete Script.
            /// </summary>
            /// <param name="request">Request object for DeleteScript.</param>
            /// <param name="operationConfiguration">Configuration for DeleteScript.</param>
            /// <returns>Task for a Response object containing status code, headers.</returns>
            /// <exception cref="Unity.Services.CloudCode.Authoring.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response> DeleteScriptAsync(Unity.Services.CloudCode.Authoring.Client.Default.DeleteScriptRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Get Module.
            /// </summary>
            /// <param name="request">Request object for GetModule.</param>
            /// <param name="operationConfiguration">Configuration for GetModule.</param>
            /// <returns>Task for a Response object containing status code, headers, and CloudCodeGetModuleResponse object.</returns>
            /// <exception cref="Unity.Services.CloudCode.Authoring.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<CloudCodeGetModuleResponse>> GetModuleAsync(Unity.Services.CloudCode.Authoring.Client.Default.GetModuleRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Get Script.
            /// </summary>
            /// <param name="request">Request object for GetScript.</param>
            /// <param name="operationConfiguration">Configuration for GetScript.</param>
            /// <returns>Task for a Response object containing status code, headers, and CloudCodeGetScriptResponse object.</returns>
            /// <exception cref="Unity.Services.CloudCode.Authoring.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<CloudCodeGetScriptResponse>> GetScriptAsync(Unity.Services.CloudCode.Authoring.Client.Default.GetScriptRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// List Modules.
            /// </summary>
            /// <param name="request">Request object for ListModules.</param>
            /// <param name="operationConfiguration">Configuration for ListModules.</param>
            /// <returns>Task for a Response object containing status code, headers, and CloudCodeListModulesResponse object.</returns>
            /// <exception cref="Unity.Services.CloudCode.Authoring.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<CloudCodeListModulesResponse>> ListModulesAsync(Unity.Services.CloudCode.Authoring.Client.Default.ListModulesRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// List Scripts.
            /// </summary>
            /// <param name="request">Request object for ListScripts.</param>
            /// <param name="operationConfiguration">Configuration for ListScripts.</param>
            /// <returns>Task for a Response object containing status code, headers, and CloudCodeListScriptsResponse object.</returns>
            /// <exception cref="Unity.Services.CloudCode.Authoring.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<CloudCodeListScriptsResponse>> ListScriptsAsync(Unity.Services.CloudCode.Authoring.Client.Default.ListScriptsRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Publish Script.
            /// </summary>
            /// <param name="request">Request object for PublishScript.</param>
            /// <param name="operationConfiguration">Configuration for PublishScript.</param>
            /// <returns>Task for a Response object containing status code, headers, and CloudCodePublishScriptResponse object.</returns>
            /// <exception cref="Unity.Services.CloudCode.Authoring.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<CloudCodePublishScriptResponse>> PublishScriptAsync(Unity.Services.CloudCode.Authoring.Client.Default.PublishScriptRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Test Script.
            /// </summary>
            /// <param name="request">Request object for TestScript.</param>
            /// <param name="operationConfiguration">Configuration for TestScript.</param>
            /// <returns>Task for a Response object containing status code, headers, and CloudCodeTestScriptResponse object.</returns>
            /// <exception cref="Unity.Services.CloudCode.Authoring.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<CloudCodeTestScriptResponse>> TestScriptAsync(Unity.Services.CloudCode.Authoring.Client.Default.TestScriptRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Update Module.
            /// </summary>
            /// <param name="request">Request object for UpdateModule.</param>
            /// <param name="operationConfiguration">Configuration for UpdateModule.</param>
            /// <returns>Task for a Response object containing status code, headers, and CloudCodeUpdateModuleResponse object.</returns>
            /// <exception cref="Unity.Services.CloudCode.Authoring.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<CloudCodeUpdateModuleResponse>> UpdateModuleAsync(Unity.Services.CloudCode.Authoring.Client.Default.UpdateModuleRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Update Script.
            /// </summary>
            /// <param name="request">Request object for UpdateScript.</param>
            /// <param name="operationConfiguration">Configuration for UpdateScript.</param>
            /// <returns>Task for a Response object containing status code, headers.</returns>
            /// <exception cref="Unity.Services.CloudCode.Authoring.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response> UpdateScriptAsync(Unity.Services.CloudCode.Authoring.Client.Default.UpdateScriptRequest request, Configuration operationConfiguration = null);

    }

    ///<inheritdoc cref="IDefaultApiClient"/>
    internal class DefaultApiClient : BaseApiClient, IDefaultApiClient
    {
        private const int _baseTimeout = 10;
        private Configuration _configuration;
        /// <summary>
        /// Accessor for the client configuration object. This returns a merge
        /// between the current configuration and the global configuration to
        /// ensure the correct combination of headers and a base path (if it is
        /// set) are returned.
        /// </summary>
        public Configuration Configuration
        {
            get {
                // We return a merge between the current configuration and the
                // global configuration to ensure we have the correct
                // combination of headers and a base path (if it is set).
                Configuration globalConfiguration = new Configuration("https://services.unity.com", 10, 4, null);
                return Configuration.MergeConfigurations(_configuration, globalConfiguration);
            }
            set { _configuration = value; }
        }

        /// <summary>
        /// DefaultApiClient Constructor.
        /// </summary>
        /// <param name="httpClient">The HttpClient for DefaultApiClient.</param>
        /// <param name="configuration"> DefaultApiClient Configuration object.</param>
        public DefaultApiClient(IHttpClient httpClient,
            Configuration configuration = null) : base(httpClient)
        {
            // We don't need to worry about the configuration being null at
            // this stage, we will check this in the accessor.
            _configuration = configuration;

            
        }


        /// <summary>
        /// Async Operation.
        /// Create an anonymous player.
        /// </summary>
        /// <param name="request">Request object for CreateAnonymousPlayer.</param>
        /// <param name="operationConfiguration">Configuration for CreateAnonymousPlayer.</param>
        /// <returns>Task for a Response object containing status code, headers, and CloudCodeCreateAnonymousPlayerResponse object.</returns>
        /// <exception cref="Unity.Services.CloudCode.Authoring.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<CloudCodeCreateAnonymousPlayerResponse>> CreateAnonymousPlayerAsync(Unity.Services.CloudCode.Authoring.Client.Default.CreateAnonymousPlayerRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(CloudCodeCreateAnonymousPlayerResponse)   },{"500", typeof(CloudCodeBasicErrorResponse)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("POST",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout,
                finalConfiguration.RetryPolicyConfiguration,
                finalConfiguration.StatusCodePolicyConfiguration);

            var handledResponse = ResponseHandler.HandleAsyncResponse<CloudCodeCreateAnonymousPlayerResponse>(response, statusCodeToTypeMap);
            return new Response<CloudCodeCreateAnonymousPlayerResponse>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Create Module.
        /// </summary>
        /// <param name="request">Request object for CreateModule.</param>
        /// <param name="operationConfiguration">Configuration for CreateModule.</param>
        /// <returns>Task for a Response object containing status code, headers, and CloudCodeCreateModuleResponse object.</returns>
        /// <exception cref="Unity.Services.CloudCode.Authoring.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<CloudCodeCreateModuleResponse>> CreateModuleAsync(Unity.Services.CloudCode.Authoring.Client.Default.CreateModuleRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"201", typeof(CloudCodeCreateModuleResponse)   },{"400", typeof(CloudCodeBasicErrorResponse)   },{"401", typeof(CloudCodeBasicErrorResponse)   },{"404", typeof(CloudCodeBasicErrorResponse)   },{"500", typeof(CloudCodeBasicErrorResponse)   },{"507", typeof(CloudCodeBasicErrorResponse)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("POST",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout,
                finalConfiguration.RetryPolicyConfiguration,
                finalConfiguration.StatusCodePolicyConfiguration,
                "BoundaryCreateModuleBoundary");

            var handledResponse = ResponseHandler.HandleAsyncResponse<CloudCodeCreateModuleResponse>(response, statusCodeToTypeMap);
            return new Response<CloudCodeCreateModuleResponse>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Create Script.
        /// </summary>
        /// <param name="request">Request object for CreateScript.</param>
        /// <param name="operationConfiguration">Configuration for CreateScript.</param>
        /// <returns>Task for a Response object containing status code, headers.</returns>
        /// <exception cref="Unity.Services.CloudCode.Authoring.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response> CreateScriptAsync(Unity.Services.CloudCode.Authoring.Client.Default.CreateScriptRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"201",  null },{"401", typeof(CloudCodeBasicErrorResponse)   },{"422", typeof(CloudCodeBasicErrorResponse)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("POST",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout,
                finalConfiguration.RetryPolicyConfiguration,
                finalConfiguration.StatusCodePolicyConfiguration);

            ResponseHandler.HandleAsyncResponse(response, statusCodeToTypeMap);
            return new Response(response);
        }


        /// <summary>
        /// Async Operation.
        /// Delete Module.
        /// </summary>
        /// <param name="request">Request object for DeleteModule.</param>
        /// <param name="operationConfiguration">Configuration for DeleteModule.</param>
        /// <returns>Task for a Response object containing status code, headers.</returns>
        /// <exception cref="Unity.Services.CloudCode.Authoring.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response> DeleteModuleAsync(Unity.Services.CloudCode.Authoring.Client.Default.DeleteModuleRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"204",  null },{"400", typeof(CloudCodeBasicErrorResponse)   },{"401", typeof(CloudCodeBasicErrorResponse)   },{"404", typeof(CloudCodeBasicErrorResponse)   },{"500", typeof(CloudCodeBasicErrorResponse)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("DELETE",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout,
                finalConfiguration.RetryPolicyConfiguration,
                finalConfiguration.StatusCodePolicyConfiguration);

            ResponseHandler.HandleAsyncResponse(response, statusCodeToTypeMap);
            return new Response(response);
        }


        /// <summary>
        /// Async Operation.
        /// Delete Script.
        /// </summary>
        /// <param name="request">Request object for DeleteScript.</param>
        /// <param name="operationConfiguration">Configuration for DeleteScript.</param>
        /// <returns>Task for a Response object containing status code, headers.</returns>
        /// <exception cref="Unity.Services.CloudCode.Authoring.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response> DeleteScriptAsync(Unity.Services.CloudCode.Authoring.Client.Default.DeleteScriptRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"204",  null },{"401", typeof(CloudCodeBasicErrorResponse)   },{"404", typeof(CloudCodeBasicErrorResponse)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("DELETE",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout,
                finalConfiguration.RetryPolicyConfiguration,
                finalConfiguration.StatusCodePolicyConfiguration);

            ResponseHandler.HandleAsyncResponse(response, statusCodeToTypeMap);
            return new Response(response);
        }


        /// <summary>
        /// Async Operation.
        /// Get Module.
        /// </summary>
        /// <param name="request">Request object for GetModule.</param>
        /// <param name="operationConfiguration">Configuration for GetModule.</param>
        /// <returns>Task for a Response object containing status code, headers, and CloudCodeGetModuleResponse object.</returns>
        /// <exception cref="Unity.Services.CloudCode.Authoring.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<CloudCodeGetModuleResponse>> GetModuleAsync(Unity.Services.CloudCode.Authoring.Client.Default.GetModuleRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(CloudCodeGetModuleResponse)   },{"400", typeof(CloudCodeBasicErrorResponse)   },{"401", typeof(CloudCodeBasicErrorResponse)   },{"404", typeof(CloudCodeBasicErrorResponse)   },{"500", typeof(CloudCodeBasicErrorResponse)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("GET",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout,
                finalConfiguration.RetryPolicyConfiguration,
                finalConfiguration.StatusCodePolicyConfiguration);

            var handledResponse = ResponseHandler.HandleAsyncResponse<CloudCodeGetModuleResponse>(response, statusCodeToTypeMap);
            return new Response<CloudCodeGetModuleResponse>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Get Script.
        /// </summary>
        /// <param name="request">Request object for GetScript.</param>
        /// <param name="operationConfiguration">Configuration for GetScript.</param>
        /// <returns>Task for a Response object containing status code, headers, and CloudCodeGetScriptResponse object.</returns>
        /// <exception cref="Unity.Services.CloudCode.Authoring.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<CloudCodeGetScriptResponse>> GetScriptAsync(Unity.Services.CloudCode.Authoring.Client.Default.GetScriptRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(CloudCodeGetScriptResponse)   },{"401", typeof(CloudCodeBasicErrorResponse)   },{"404", typeof(CloudCodeBasicErrorResponse)   },{"500", typeof(CloudCodeBasicErrorResponse)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("GET",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout,
                finalConfiguration.RetryPolicyConfiguration,
                finalConfiguration.StatusCodePolicyConfiguration);

            var handledResponse = ResponseHandler.HandleAsyncResponse<CloudCodeGetScriptResponse>(response, statusCodeToTypeMap);
            return new Response<CloudCodeGetScriptResponse>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// List Modules.
        /// </summary>
        /// <param name="request">Request object for ListModules.</param>
        /// <param name="operationConfiguration">Configuration for ListModules.</param>
        /// <returns>Task for a Response object containing status code, headers, and CloudCodeListModulesResponse object.</returns>
        /// <exception cref="Unity.Services.CloudCode.Authoring.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<CloudCodeListModulesResponse>> ListModulesAsync(Unity.Services.CloudCode.Authoring.Client.Default.ListModulesRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(CloudCodeListModulesResponse)   },{"400", typeof(CloudCodeBasicErrorResponse)   },{"401", typeof(CloudCodeBasicErrorResponse)   },{"404", typeof(CloudCodeBasicErrorResponse)   },{"500", typeof(CloudCodeBasicErrorResponse)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("GET",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout,
                finalConfiguration.RetryPolicyConfiguration,
                finalConfiguration.StatusCodePolicyConfiguration);

            var handledResponse = ResponseHandler.HandleAsyncResponse<CloudCodeListModulesResponse>(response, statusCodeToTypeMap);
            return new Response<CloudCodeListModulesResponse>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// List Scripts.
        /// </summary>
        /// <param name="request">Request object for ListScripts.</param>
        /// <param name="operationConfiguration">Configuration for ListScripts.</param>
        /// <returns>Task for a Response object containing status code, headers, and CloudCodeListScriptsResponse object.</returns>
        /// <exception cref="Unity.Services.CloudCode.Authoring.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<CloudCodeListScriptsResponse>> ListScriptsAsync(Unity.Services.CloudCode.Authoring.Client.Default.ListScriptsRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(CloudCodeListScriptsResponse)   },{"401", typeof(CloudCodeBasicErrorResponse)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("GET",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout,
                finalConfiguration.RetryPolicyConfiguration,
                finalConfiguration.StatusCodePolicyConfiguration);

            var handledResponse = ResponseHandler.HandleAsyncResponse<CloudCodeListScriptsResponse>(response, statusCodeToTypeMap);
            return new Response<CloudCodeListScriptsResponse>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Publish Script.
        /// </summary>
        /// <param name="request">Request object for PublishScript.</param>
        /// <param name="operationConfiguration">Configuration for PublishScript.</param>
        /// <returns>Task for a Response object containing status code, headers, and CloudCodePublishScriptResponse object.</returns>
        /// <exception cref="Unity.Services.CloudCode.Authoring.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<CloudCodePublishScriptResponse>> PublishScriptAsync(Unity.Services.CloudCode.Authoring.Client.Default.PublishScriptRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(CloudCodePublishScriptResponse)   },{"400", typeof(CloudCodeBasicErrorResponse)   },{"401", typeof(CloudCodeBasicErrorResponse)   },{"404", typeof(CloudCodeBasicErrorResponse)   },{"500", typeof(CloudCodeBasicErrorResponse)   },{"503", typeof(CloudCodeBasicErrorResponse)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("POST",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout,
                finalConfiguration.RetryPolicyConfiguration,
                finalConfiguration.StatusCodePolicyConfiguration);

            var handledResponse = ResponseHandler.HandleAsyncResponse<CloudCodePublishScriptResponse>(response, statusCodeToTypeMap);
            return new Response<CloudCodePublishScriptResponse>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Test Script.
        /// </summary>
        /// <param name="request">Request object for TestScript.</param>
        /// <param name="operationConfiguration">Configuration for TestScript.</param>
        /// <returns>Task for a Response object containing status code, headers, and CloudCodeTestScriptResponse object.</returns>
        /// <exception cref="Unity.Services.CloudCode.Authoring.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<CloudCodeTestScriptResponse>> TestScriptAsync(Unity.Services.CloudCode.Authoring.Client.Default.TestScriptRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(CloudCodeTestScriptResponse)   },{"400", typeof(TestScript400Response)   },{"401", typeof(CloudCodeBasicErrorResponse)   },{"404", typeof(CloudCodeBasicErrorResponse)   },{"422", typeof(TestScript400Response)   },{"500", typeof(CloudCodeBasicErrorResponse)   },{"503", typeof(CloudCodeBasicErrorResponse)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("POST",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout,
                finalConfiguration.RetryPolicyConfiguration,
                finalConfiguration.StatusCodePolicyConfiguration);

            var handledResponse = ResponseHandler.HandleAsyncResponse<CloudCodeTestScriptResponse>(response, statusCodeToTypeMap);
            return new Response<CloudCodeTestScriptResponse>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Update Module.
        /// </summary>
        /// <param name="request">Request object for UpdateModule.</param>
        /// <param name="operationConfiguration">Configuration for UpdateModule.</param>
        /// <returns>Task for a Response object containing status code, headers, and CloudCodeUpdateModuleResponse object.</returns>
        /// <exception cref="Unity.Services.CloudCode.Authoring.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<CloudCodeUpdateModuleResponse>> UpdateModuleAsync(Unity.Services.CloudCode.Authoring.Client.Default.UpdateModuleRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(CloudCodeUpdateModuleResponse)   },{"400", typeof(CloudCodeBasicErrorResponse)   },{"401", typeof(CloudCodeBasicErrorResponse)   },{"404", typeof(CloudCodeBasicErrorResponse)   },{"500", typeof(CloudCodeBasicErrorResponse)   },{"507", typeof(CloudCodeBasicErrorResponse)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("PATCH",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout,
                finalConfiguration.RetryPolicyConfiguration,
                finalConfiguration.StatusCodePolicyConfiguration,
                "BoundaryUpdateModuleBoundary");

            var handledResponse = ResponseHandler.HandleAsyncResponse<CloudCodeUpdateModuleResponse>(response, statusCodeToTypeMap);
            return new Response<CloudCodeUpdateModuleResponse>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Update Script.
        /// </summary>
        /// <param name="request">Request object for UpdateScript.</param>
        /// <param name="operationConfiguration">Configuration for UpdateScript.</param>
        /// <returns>Task for a Response object containing status code, headers.</returns>
        /// <exception cref="Unity.Services.CloudCode.Authoring.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response> UpdateScriptAsync(Unity.Services.CloudCode.Authoring.Client.Default.UpdateScriptRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"204",  null },{"401", typeof(CloudCodeBasicErrorResponse)   },{"404", typeof(CloudCodeBasicErrorResponse)   },{"422", typeof(CloudCodeBasicErrorResponse)   },{"500", typeof(CloudCodeBasicErrorResponse)   },{"503", typeof(CloudCodeBasicErrorResponse)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("PATCH",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout,
                finalConfiguration.RetryPolicyConfiguration,
                finalConfiguration.StatusCodePolicyConfiguration);

            ResponseHandler.HandleAsyncResponse(response, statusCodeToTypeMap);
            return new Response(response);
        }

    }
}
