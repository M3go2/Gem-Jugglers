//-----------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by the C# SDK Code Generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using UnityEngine;
using UnityEngine.Networking;
using UnityEngine.Scripting;
using Unity.Services.Ccd.Management.Models;
using Unity.Services.Ccd.Management.Scheduler;


namespace Unity.Services.Ccd.Management.Content
{
    internal static class JsonSerialization
    {
        public static byte[] Serialize<T>(T obj)
        {
            return Encoding.UTF8.GetBytes(SerializeToString(obj));
        }

        public static string SerializeToString<T>(T obj)
        {
            return JsonConvert.SerializeObject(obj, new JsonSerializerSettings{ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Ignore});
        }
    }

    /// <summary>
    /// ContentApiBaseRequest class
    /// </summary>
    [Preserve]
    internal class ContentApiBaseRequest
    {
        /// <summary>
        /// Helper function to add a provided key and value to the provided
        /// query params and to escape the values correctly if it is a URL.
        /// </summary>
        /// <param name="queryParams">A `List/<string/>` of the query parameters.</param>
        /// <param name="key">The key to be added.</param>
        /// <param name="value">The value to be added.</param>
        /// <returns>Returns a `List/<string/>` with the `key` and `value` added to the provided `queryParams`.</returns>
        [Preserve]
        public List<string> AddParamsToQueryParams(List<string> queryParams, string key, string value)
        {
            key = UnityWebRequest.EscapeURL(key);
            value = UnityWebRequest.EscapeURL(value);
            queryParams.Add($"{key}={value}");

            return queryParams;
        }

        /// <summary>
        /// Helper function to add a provided key and list of values to the
        /// provided query params and to escape the values correctly if it is a
        /// URL.
        /// </summary>
        /// <param name="queryParams">A `List/<string/>` of the query parameters.</param>
        /// <param name="key">The key to be added.</param>
        /// <param name="values">List of values to be added.</param>
        /// <param name="style">string for defining the style, currently unused.</param>
        /// <param name="explode">True if query params should be escaped and added separately.</param>
        /// <returns>Returns a `List/<string/>`</returns>
        [Preserve]
        public List<string> AddParamsToQueryParams(List<string> queryParams, string key, List<string> values, string style, bool explode)
        {
            if (explode)
            {
                foreach(var value in values)
                {
                    string escapedValue = UnityWebRequest.EscapeURL(value);
                    queryParams.Add($"{UnityWebRequest.EscapeURL(key)}={escapedValue}");
                }
            }
            else
            {
                string paramString = $"{UnityWebRequest.EscapeURL(key)}=";
                foreach(var value in values)
                {
                    paramString += UnityWebRequest.EscapeURL(value) + ",";
                }
                paramString = paramString.Remove(paramString.Length - 1);
                queryParams.Add(paramString);
            }

            return queryParams;
        }

        /// <summary>
        /// Helper function to add a provided map of keys and values, representing a model, to the
        /// provided query params.
        /// </summary>
        /// <param name="queryParams">A `List/<string/>` of the query parameters.</param>
        /// <param name="modelVars">A `Dictionary` representing the vars of the model</param>
        /// <returns>Returns a `List/<string/>`</returns>
        [Preserve]
        public List<string> AddParamsToQueryParams(List<string> queryParams, Dictionary<string, string> modelVars)
        {
            foreach(var key in modelVars.Keys)
            {
                string escapedValue = UnityWebRequest.EscapeURL(modelVars[key]);
                queryParams.Add($"{UnityWebRequest.EscapeURL(key)}={escapedValue}");
            }

            return queryParams;
        }

        /// <summary>
        /// Helper function to add a provided key and value to the provided
        /// query params and to escape the values correctly if it is a URL.
        /// </summary>
        /// <param name="queryParams">A `List/<string/>` of the query parameters.</param>
        /// <param name="key">The key to be added.</param>
        /// <typeparam name="T">The type of the value to be added.</typeparam>
        /// <param name="value">The value to be added.</param>
        /// <returns>Returns a `List/<string/>`</returns>
        [Preserve]
        public List<string> AddParamsToQueryParams<T>(List<string> queryParams, string key, T value)
        {
            if (queryParams == null)
            {
                queryParams = new List<string>();
            }

            key = UnityWebRequest.EscapeURL(key);
            string valueString = UnityWebRequest.EscapeURL(value.ToString());
            queryParams.Add($"{key}={valueString}");
            return queryParams;
        }

        /// <summary>
        /// Constructs a string representing an array path parameter.
        /// </summary>
        /// <param name="pathParam">The list of values to convert to string.</param>
        /// <returns>String representing the param.</returns>
        [Preserve]
        public string GetPathParamString(List<string> pathParam)
        {
            string paramString = "";
            foreach(var value in pathParam)
            {
                paramString += UnityWebRequest.EscapeURL(value) + ",";
            }
            paramString = paramString.Remove(paramString.Length - 1);
            return paramString;
        }

        /// <summary>
        /// Constructs the body of the request based on IO stream.
        /// </summary>
        /// <param name="stream">The IO stream to use.</param>
        /// <returns>Byte array representing the body.</returns>
        public byte[] ConstructBody(System.IO.Stream stream)
        {
            if (stream != null)
            {
                using (System.IO.MemoryStream ms = new System.IO.MemoryStream())
                {
                    stream.CopyTo(ms);
                    return ms.ToArray();
                }
            }
            return null;
        }

        /// <summary>
        /// Construct the request body based on string value.
        /// </summary>
        /// <param name="s">The input body.</param>
        /// <returns>Byte array representing the body.</returns>
        public byte[] ConstructBody(string s)
        {
            return System.Text.Encoding.UTF8.GetBytes(s);
        }

        /// <summary>
        /// Construct request body based on generic object.
        /// </summary>
        /// <param name="o">The object to use.</param>
        /// <returns>Byte array representing the body.</returns>
        public byte[] ConstructBody(object o)
        {
            return JsonSerialization.Serialize(o);
        }

        /// <summary>
        /// Generate an accept header.
        /// </summary>
        /// <param name="accepts">list of accepts objects.</param>
        /// <returns>The generated accept header.</returns>
        public string GenerateAcceptHeader(string[] accepts)
        {
            if (accepts.Length == 0)
            {
                return null;
            }
            for (int i = 0; i < accepts.Length; ++i)
            {
                if (string.Equals(accepts[i], "application/json", System.StringComparison.OrdinalIgnoreCase))
                {
                    return "application/json";
                }
            }
            return string.Join(", ", accepts);
        }

        private static readonly Regex JsonRegex = new Regex(@"application\/json(;\s)?((charset=utf8|q=[0-1]\.\d)(\s)?)*");

        /// <summary>
        /// Generate Content Type Header.
        /// </summary>
        /// <param name="contentTypes">The content types.</param>
        /// <returns>The Content Type Header.</returns>
        public string GenerateContentTypeHeader(string[] contentTypes)
        {
            if (contentTypes.Length == 0)
            {
                return null;
            }

            for(int i = 0; i < contentTypes.Length; ++i)
            {
                if (!string.IsNullOrWhiteSpace(contentTypes[i]) && JsonRegex.IsMatch(contentTypes[i]))
                {
                    return contentTypes[i];
                }
            }
            return contentTypes[0];
        }

        /// <summary>
        /// Generate multipart form file section.
        /// </summary>
        /// <param name="paramName">The parameter name.</param>
        /// <param name="stream">The file stream to use.</param>
        /// <param name="contentType">The content type.</param>
        /// <returns>Returns a multipart form section.</returns>
        public IMultipartFormSection GenerateMultipartFormFileSection(string paramName, System.IO.FileStream stream, string contentType)
        {
            return new MultipartFormFileSection(paramName, ConstructBody(stream), GetFileName(stream.Name), contentType);
        }

        /// <summary>
        /// Generate multipart form file section.
        /// </summary>
        /// <param name="paramName">The parameter name.</param>
        /// <param name="stream">The IO stream to use.</param>
        /// <param name="contentType">The content type.</param>
        /// <returns>Returns a multipart form section.</returns>
        public IMultipartFormSection GenerateMultipartFormFileSection(string paramName, System.IO.Stream stream, string contentType)
        {
            return new MultipartFormFileSection(paramName, ConstructBody(stream), Guid.NewGuid().ToString(), contentType);
        }

        private string GetFileName(string filePath)
        {
            return System.IO.Path.GetFileName(filePath);
        }
    }

    /// <summary>
    /// CreateContentRequest
    /// Create content upload for TUS
    /// </summary>
    [Preserve]
    internal class CreateContentRequest : ContentApiBaseRequest
    {
        /// <summary>Accessor for bucketid </summary>
        [Preserve]
        public string Bucketid { get; }
        /// <summary>Accessor for entryid </summary>
        [Preserve]
        public string Entryid { get; }
        /// <summary>Accessor for projectid </summary>
        [Preserve]
        public string Projectid { get; }
        /// <summary>Accessor for versionid </summary>
        [Preserve]
        public string Versionid { get; }
        string PathAndQueryParams;

        /// <summary>
        /// CreateContent Request Object.
        /// Create content upload for TUS
        /// </summary>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="entryid">Entry ID</param>
        /// <param name="projectid">Project ID</param>
        /// <param name="versionid">Version ID</param>
        [Preserve]
        public CreateContentRequest(string bucketid, string entryid, string projectid, string versionid = default(string))
        {
            Bucketid = bucketid;

            Entryid = entryid;

            Projectid = projectid;

            Versionid = versionid;
            PathAndQueryParams = $"/api/ccd/management/v1/projects/{projectid}/buckets/{bucketid}/entries/{entryid}/content";

            List<string> queryParams = new List<string>();

            if(!string.IsNullOrEmpty(Versionid))
            {
                queryParams = AddParamsToQueryParams(queryParams, "versionid", Versionid);
            }
            if (queryParams.Count > 0)
            {
                PathAndQueryParams = $"{PathAndQueryParams}?{string.Join("&", queryParams)}";
            }
        }

        /// <summary>
        /// Helper function for constructing URL from request base path and
        /// query params.
        /// </summary>
        /// <param name="requestBasePath"></param>
        /// <returns></returns>
        public string ConstructUrl(string requestBasePath)
        {
            return requestBasePath + PathAndQueryParams;
        }

        /// <summary>
        /// Helper for constructing the request body.
        /// </summary>
        /// <returns>A list of IMultipartFormSection representing the request body.</returns>
        public byte[] ConstructBody()
        {
            return null;
        }

        /// <summary>
        /// Helper function for constructing the headers.
        /// </summary>
        /// <param name="operationConfiguration">The operation configuration to use.</param>
        /// <returns>A dictionary representing the request headers.</returns>
        public Dictionary<string, string> ConstructHeaders(Configuration operationConfiguration = null)
        {
            var headers = new Dictionary<string, string>();

            // Analytics headers
            headers.Add("Unity-Client-Version", Application.unityVersion);
            headers.Add("Unity-Client-Mode", Scheduler.EngineStateHelper.IsPlaying ? "play" : "edit");

            string[] contentTypes = {
            };

            string[] accepts = {
                "application/problem+json"
            };

            var acceptHeader = GenerateAcceptHeader(accepts);
            if (!string.IsNullOrEmpty(acceptHeader))
            {
                headers.Add("Accept", acceptHeader);
            }
            var httpMethod = "POST";
            var contentTypeHeader = GenerateContentTypeHeader(contentTypes);
            if (!string.IsNullOrEmpty(contentTypeHeader))
            {
                headers.Add("Content-Type", contentTypeHeader);
            }
            else if (httpMethod == "POST" || httpMethod == "PATCH")
            {
                headers.Add("Content-Type", "application/json");
            }


            // We also check if there are headers that are defined as part of
            // the request configuration.
            if (operationConfiguration != null && operationConfiguration.Headers != null)
            {
                foreach (var pair in operationConfiguration.Headers)
                {
                    headers[pair.Key] = pair.Value;
                }
            }

            return headers;
        }
    }
    /// <summary>
    /// CreateContentEnvRequest
    /// Create content upload for TUS
    /// </summary>
    [Preserve]
    internal class CreateContentEnvRequest : ContentApiBaseRequest
    {
        /// <summary>Accessor for environmentid </summary>
        [Preserve]
        public string Environmentid { get; }
        /// <summary>Accessor for bucketid </summary>
        [Preserve]
        public string Bucketid { get; }
        /// <summary>Accessor for entryid </summary>
        [Preserve]
        public string Entryid { get; }
        /// <summary>Accessor for projectid </summary>
        [Preserve]
        public string Projectid { get; }
        /// <summary>Accessor for versionid </summary>
        [Preserve]
        public string Versionid { get; }
        string PathAndQueryParams;

        /// <summary>
        /// CreateContentEnv Request Object.
        /// Create content upload for TUS
        /// </summary>
        /// <param name="environmentid">Environment ID</param>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="entryid">Entry ID</param>
        /// <param name="projectid">Project ID</param>
        /// <param name="versionid">Version ID</param>
        [Preserve]
        public CreateContentEnvRequest(string environmentid, string bucketid, string entryid, string projectid, string versionid = default(string))
        {
            Environmentid = environmentid;

            Bucketid = bucketid;

            Entryid = entryid;

            Projectid = projectid;

            Versionid = versionid;
            PathAndQueryParams = $"/api/ccd/management/v1/projects/{projectid}/environments/{environmentid}/buckets/{bucketid}/entries/{entryid}/content";

            List<string> queryParams = new List<string>();

            if(!string.IsNullOrEmpty(Versionid))
            {
                queryParams = AddParamsToQueryParams(queryParams, "versionid", Versionid);
            }
            if (queryParams.Count > 0)
            {
                PathAndQueryParams = $"{PathAndQueryParams}?{string.Join("&", queryParams)}";
            }
        }

        /// <summary>
        /// Helper function for constructing URL from request base path and
        /// query params.
        /// </summary>
        /// <param name="requestBasePath"></param>
        /// <returns></returns>
        public string ConstructUrl(string requestBasePath)
        {
            return requestBasePath + PathAndQueryParams;
        }

        /// <summary>
        /// Helper for constructing the request body.
        /// </summary>
        /// <returns>A list of IMultipartFormSection representing the request body.</returns>
        public byte[] ConstructBody()
        {
            return null;
        }

        /// <summary>
        /// Helper function for constructing the headers.
        /// </summary>
        /// <param name="operationConfiguration">The operation configuration to use.</param>
        /// <returns>A dictionary representing the request headers.</returns>
        public Dictionary<string, string> ConstructHeaders(Configuration operationConfiguration = null)
        {
            var headers = new Dictionary<string, string>();

            // Analytics headers
            headers.Add("Unity-Client-Version", Application.unityVersion);
            headers.Add("Unity-Client-Mode", Scheduler.EngineStateHelper.IsPlaying ? "play" : "edit");

            string[] contentTypes = {
            };

            string[] accepts = {
                "application/problem+json"
            };

            var acceptHeader = GenerateAcceptHeader(accepts);
            if (!string.IsNullOrEmpty(acceptHeader))
            {
                headers.Add("Accept", acceptHeader);
            }
            var httpMethod = "POST";
            var contentTypeHeader = GenerateContentTypeHeader(contentTypes);
            if (!string.IsNullOrEmpty(contentTypeHeader))
            {
                headers.Add("Content-Type", contentTypeHeader);
            }
            else if (httpMethod == "POST" || httpMethod == "PATCH")
            {
                headers.Add("Content-Type", "application/json");
            }


            // We also check if there are headers that are defined as part of
            // the request configuration.
            if (operationConfiguration != null && operationConfiguration.Headers != null)
            {
                foreach (var pair in operationConfiguration.Headers)
                {
                    headers[pair.Key] = pair.Value;
                }
            }

            return headers;
        }
    }
    /// <summary>
    /// GetContentRequest
    /// Get content by entryid
    /// </summary>
    [Preserve]
    internal class GetContentRequest : ContentApiBaseRequest
    {
        /// <summary>Accessor for bucketid </summary>
        [Preserve]
        public string Bucketid { get; }
        /// <summary>Accessor for entryid </summary>
        [Preserve]
        public string Entryid { get; }
        /// <summary>Accessor for projectid </summary>
        [Preserve]
        public string Projectid { get; }
        /// <summary>Accessor for versionid </summary>
        [Preserve]
        public string Versionid { get; }
        string PathAndQueryParams;

        /// <summary>
        /// GetContent Request Object.
        /// Get content by entryid
        /// </summary>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="entryid">Entry ID</param>
        /// <param name="projectid">Project ID</param>
        /// <param name="versionid">Version ID</param>
        [Preserve]
        public GetContentRequest(string bucketid, string entryid, string projectid, string versionid = default(string))
        {
            Bucketid = bucketid;

            Entryid = entryid;

            Projectid = projectid;

            Versionid = versionid;
            PathAndQueryParams = $"/api/ccd/management/v1/projects/{projectid}/buckets/{bucketid}/entries/{entryid}/content";

            List<string> queryParams = new List<string>();

            if(!string.IsNullOrEmpty(Versionid))
            {
                queryParams = AddParamsToQueryParams(queryParams, "versionid", Versionid);
            }
            if (queryParams.Count > 0)
            {
                PathAndQueryParams = $"{PathAndQueryParams}?{string.Join("&", queryParams)}";
            }
        }

        /// <summary>
        /// Helper function for constructing URL from request base path and
        /// query params.
        /// </summary>
        /// <param name="requestBasePath"></param>
        /// <returns></returns>
        public string ConstructUrl(string requestBasePath)
        {
            return requestBasePath + PathAndQueryParams;
        }

        /// <summary>
        /// Helper for constructing the request body.
        /// </summary>
        /// <returns>A list of IMultipartFormSection representing the request body.</returns>
        public byte[] ConstructBody()
        {
            return null;
        }

        /// <summary>
        /// Helper function for constructing the headers.
        /// </summary>
        /// <param name="operationConfiguration">The operation configuration to use.</param>
        /// <returns>A dictionary representing the request headers.</returns>
        public Dictionary<string, string> ConstructHeaders(Configuration operationConfiguration = null)
        {
            var headers = new Dictionary<string, string>();

            // Analytics headers
            headers.Add("Unity-Client-Version", Application.unityVersion);
            headers.Add("Unity-Client-Mode", Scheduler.EngineStateHelper.IsPlaying ? "play" : "edit");

            string[] contentTypes = {
            };

            string[] accepts = {
                "application/octet-stream",
                "application/problem+json"
            };

            var acceptHeader = GenerateAcceptHeader(accepts);
            if (!string.IsNullOrEmpty(acceptHeader))
            {
                headers.Add("Accept", acceptHeader);
            }
            var httpMethod = "GET";
            var contentTypeHeader = GenerateContentTypeHeader(contentTypes);
            if (!string.IsNullOrEmpty(contentTypeHeader))
            {
                headers.Add("Content-Type", contentTypeHeader);
            }
            else if (httpMethod == "POST" || httpMethod == "PATCH")
            {
                headers.Add("Content-Type", "application/json");
            }


            // We also check if there are headers that are defined as part of
            // the request configuration.
            if (operationConfiguration != null && operationConfiguration.Headers != null)
            {
                foreach (var pair in operationConfiguration.Headers)
                {
                    headers[pair.Key] = pair.Value;
                }
            }

            return headers;
        }
    }
    /// <summary>
    /// GetContentEnvRequest
    /// Get content by entryid
    /// </summary>
    [Preserve]
    internal class GetContentEnvRequest : ContentApiBaseRequest
    {
        /// <summary>Accessor for environmentid </summary>
        [Preserve]
        public string Environmentid { get; }
        /// <summary>Accessor for bucketid </summary>
        [Preserve]
        public string Bucketid { get; }
        /// <summary>Accessor for entryid </summary>
        [Preserve]
        public string Entryid { get; }
        /// <summary>Accessor for projectid </summary>
        [Preserve]
        public string Projectid { get; }
        /// <summary>Accessor for versionid </summary>
        [Preserve]
        public string Versionid { get; }
        string PathAndQueryParams;

        /// <summary>
        /// GetContentEnv Request Object.
        /// Get content by entryid
        /// </summary>
        /// <param name="environmentid">Environment ID</param>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="entryid">Entry ID</param>
        /// <param name="projectid">Project ID</param>
        /// <param name="versionid">Version ID</param>
        [Preserve]
        public GetContentEnvRequest(string environmentid, string bucketid, string entryid, string projectid, string versionid = default(string))
        {
            Environmentid = environmentid;

            Bucketid = bucketid;

            Entryid = entryid;

            Projectid = projectid;

            Versionid = versionid;
            PathAndQueryParams = $"/api/ccd/management/v1/projects/{projectid}/environments/{environmentid}/buckets/{bucketid}/entries/{entryid}/content";

            List<string> queryParams = new List<string>();

            if(!string.IsNullOrEmpty(Versionid))
            {
                queryParams = AddParamsToQueryParams(queryParams, "versionid", Versionid);
            }
            if (queryParams.Count > 0)
            {
                PathAndQueryParams = $"{PathAndQueryParams}?{string.Join("&", queryParams)}";
            }
        }

        /// <summary>
        /// Helper function for constructing URL from request base path and
        /// query params.
        /// </summary>
        /// <param name="requestBasePath"></param>
        /// <returns></returns>
        public string ConstructUrl(string requestBasePath)
        {
            return requestBasePath + PathAndQueryParams;
        }

        /// <summary>
        /// Helper for constructing the request body.
        /// </summary>
        /// <returns>A list of IMultipartFormSection representing the request body.</returns>
        public byte[] ConstructBody()
        {
            return null;
        }

        /// <summary>
        /// Helper function for constructing the headers.
        /// </summary>
        /// <param name="operationConfiguration">The operation configuration to use.</param>
        /// <returns>A dictionary representing the request headers.</returns>
        public Dictionary<string, string> ConstructHeaders(Configuration operationConfiguration = null)
        {
            var headers = new Dictionary<string, string>();

            // Analytics headers
            headers.Add("Unity-Client-Version", Application.unityVersion);
            headers.Add("Unity-Client-Mode", Scheduler.EngineStateHelper.IsPlaying ? "play" : "edit");

            string[] contentTypes = {
            };

            string[] accepts = {
                "application/octet-stream",
                "application/problem+json"
            };

            var acceptHeader = GenerateAcceptHeader(accepts);
            if (!string.IsNullOrEmpty(acceptHeader))
            {
                headers.Add("Accept", acceptHeader);
            }
            var httpMethod = "GET";
            var contentTypeHeader = GenerateContentTypeHeader(contentTypes);
            if (!string.IsNullOrEmpty(contentTypeHeader))
            {
                headers.Add("Content-Type", contentTypeHeader);
            }
            else if (httpMethod == "POST" || httpMethod == "PATCH")
            {
                headers.Add("Content-Type", "application/json");
            }


            // We also check if there are headers that are defined as part of
            // the request configuration.
            if (operationConfiguration != null && operationConfiguration.Headers != null)
            {
                foreach (var pair in operationConfiguration.Headers)
                {
                    headers[pair.Key] = pair.Value;
                }
            }

            return headers;
        }
    }
    /// <summary>
    /// GetContentStatusRequest
    /// Get content status by entryid
    /// </summary>
    [Preserve]
    internal class GetContentStatusRequest : ContentApiBaseRequest
    {
        /// <summary>Accessor for bucketid </summary>
        [Preserve]
        public string Bucketid { get; }
        /// <summary>Accessor for entryid </summary>
        [Preserve]
        public string Entryid { get; }
        /// <summary>Accessor for projectid </summary>
        [Preserve]
        public string Projectid { get; }
        /// <summary>Accessor for versionid </summary>
        [Preserve]
        public string Versionid { get; }
        string PathAndQueryParams;

        /// <summary>
        /// GetContentStatus Request Object.
        /// Get content status by entryid
        /// </summary>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="entryid">Entry ID</param>
        /// <param name="projectid">Project ID</param>
        /// <param name="versionid">Version ID</param>
        [Preserve]
        public GetContentStatusRequest(string bucketid, string entryid, string projectid, string versionid = default(string))
        {
            Bucketid = bucketid;

            Entryid = entryid;

            Projectid = projectid;

            Versionid = versionid;
            PathAndQueryParams = $"/api/ccd/management/v1/projects/{projectid}/buckets/{bucketid}/entries/{entryid}/content";

            List<string> queryParams = new List<string>();

            if(!string.IsNullOrEmpty(Versionid))
            {
                queryParams = AddParamsToQueryParams(queryParams, "versionid", Versionid);
            }
            if (queryParams.Count > 0)
            {
                PathAndQueryParams = $"{PathAndQueryParams}?{string.Join("&", queryParams)}";
            }
        }

        /// <summary>
        /// Helper function for constructing URL from request base path and
        /// query params.
        /// </summary>
        /// <param name="requestBasePath"></param>
        /// <returns></returns>
        public string ConstructUrl(string requestBasePath)
        {
            return requestBasePath + PathAndQueryParams;
        }

        /// <summary>
        /// Helper for constructing the request body.
        /// </summary>
        /// <returns>A list of IMultipartFormSection representing the request body.</returns>
        public byte[] ConstructBody()
        {
            return null;
        }

        /// <summary>
        /// Helper function for constructing the headers.
        /// </summary>
        /// <param name="operationConfiguration">The operation configuration to use.</param>
        /// <returns>A dictionary representing the request headers.</returns>
        public Dictionary<string, string> ConstructHeaders(Configuration operationConfiguration = null)
        {
            var headers = new Dictionary<string, string>();

            // Analytics headers
            headers.Add("Unity-Client-Version", Application.unityVersion);
            headers.Add("Unity-Client-Mode", Scheduler.EngineStateHelper.IsPlaying ? "play" : "edit");

            string[] contentTypes = {
            };

            string[] accepts = {
                "application/problem+json"
            };

            var acceptHeader = GenerateAcceptHeader(accepts);
            if (!string.IsNullOrEmpty(acceptHeader))
            {
                headers.Add("Accept", acceptHeader);
            }
            var httpMethod = "HEAD";
            var contentTypeHeader = GenerateContentTypeHeader(contentTypes);
            if (!string.IsNullOrEmpty(contentTypeHeader))
            {
                headers.Add("Content-Type", contentTypeHeader);
            }
            else if (httpMethod == "POST" || httpMethod == "PATCH")
            {
                headers.Add("Content-Type", "application/json");
            }


            // We also check if there are headers that are defined as part of
            // the request configuration.
            if (operationConfiguration != null && operationConfiguration.Headers != null)
            {
                foreach (var pair in operationConfiguration.Headers)
                {
                    headers[pair.Key] = pair.Value;
                }
            }

            return headers;
        }
    }
    /// <summary>
    /// GetContentStatusEnvRequest
    /// Get content status by entryid
    /// </summary>
    [Preserve]
    internal class GetContentStatusEnvRequest : ContentApiBaseRequest
    {
        /// <summary>Accessor for environmentid </summary>
        [Preserve]
        public string Environmentid { get; }
        /// <summary>Accessor for bucketid </summary>
        [Preserve]
        public string Bucketid { get; }
        /// <summary>Accessor for entryid </summary>
        [Preserve]
        public string Entryid { get; }
        /// <summary>Accessor for projectid </summary>
        [Preserve]
        public string Projectid { get; }
        /// <summary>Accessor for versionid </summary>
        [Preserve]
        public string Versionid { get; }
        string PathAndQueryParams;

        /// <summary>
        /// GetContentStatusEnv Request Object.
        /// Get content status by entryid
        /// </summary>
        /// <param name="environmentid">Environment ID</param>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="entryid">Entry ID</param>
        /// <param name="projectid">Project ID</param>
        /// <param name="versionid">Version ID</param>
        [Preserve]
        public GetContentStatusEnvRequest(string environmentid, string bucketid, string entryid, string projectid, string versionid = default(string))
        {
            Environmentid = environmentid;

            Bucketid = bucketid;

            Entryid = entryid;

            Projectid = projectid;

            Versionid = versionid;
            PathAndQueryParams = $"/api/ccd/management/v1/projects/{projectid}/environments/{environmentid}/buckets/{bucketid}/entries/{entryid}/content";

            List<string> queryParams = new List<string>();

            if(!string.IsNullOrEmpty(Versionid))
            {
                queryParams = AddParamsToQueryParams(queryParams, "versionid", Versionid);
            }
            if (queryParams.Count > 0)
            {
                PathAndQueryParams = $"{PathAndQueryParams}?{string.Join("&", queryParams)}";
            }
        }

        /// <summary>
        /// Helper function for constructing URL from request base path and
        /// query params.
        /// </summary>
        /// <param name="requestBasePath"></param>
        /// <returns></returns>
        public string ConstructUrl(string requestBasePath)
        {
            return requestBasePath + PathAndQueryParams;
        }

        /// <summary>
        /// Helper for constructing the request body.
        /// </summary>
        /// <returns>A list of IMultipartFormSection representing the request body.</returns>
        public byte[] ConstructBody()
        {
            return null;
        }

        /// <summary>
        /// Helper function for constructing the headers.
        /// </summary>
        /// <param name="operationConfiguration">The operation configuration to use.</param>
        /// <returns>A dictionary representing the request headers.</returns>
        public Dictionary<string, string> ConstructHeaders(Configuration operationConfiguration = null)
        {
            var headers = new Dictionary<string, string>();

            // Analytics headers
            headers.Add("Unity-Client-Version", Application.unityVersion);
            headers.Add("Unity-Client-Mode", Scheduler.EngineStateHelper.IsPlaying ? "play" : "edit");

            string[] contentTypes = {
            };

            string[] accepts = {
                "application/problem+json"
            };

            var acceptHeader = GenerateAcceptHeader(accepts);
            if (!string.IsNullOrEmpty(acceptHeader))
            {
                headers.Add("Accept", acceptHeader);
            }
            var httpMethod = "HEAD";
            var contentTypeHeader = GenerateContentTypeHeader(contentTypes);
            if (!string.IsNullOrEmpty(contentTypeHeader))
            {
                headers.Add("Content-Type", contentTypeHeader);
            }
            else if (httpMethod == "POST" || httpMethod == "PATCH")
            {
                headers.Add("Content-Type", "application/json");
            }


            // We also check if there are headers that are defined as part of
            // the request configuration.
            if (operationConfiguration != null && operationConfiguration.Headers != null)
            {
                foreach (var pair in operationConfiguration.Headers)
                {
                    headers[pair.Key] = pair.Value;
                }
            }

            return headers;
        }
    }
    /// <summary>
    /// GetContentStatusVersionRequest
    /// Get content status for version of entry
    /// </summary>
    [Preserve]
    internal class GetContentStatusVersionRequest : ContentApiBaseRequest
    {
        /// <summary>Accessor for bucketid </summary>
        [Preserve]
        public string Bucketid { get; }
        /// <summary>Accessor for entryid </summary>
        [Preserve]
        public string Entryid { get; }
        /// <summary>Accessor for versionid </summary>
        [Preserve]
        public string Versionid { get; }
        /// <summary>Accessor for projectid </summary>
        [Preserve]
        public string Projectid { get; }
        string PathAndQueryParams;

        /// <summary>
        /// GetContentStatusVersion Request Object.
        /// Get content status for version of entry
        /// </summary>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="entryid">Entry ID</param>
        /// <param name="versionid">Version ID</param>
        /// <param name="projectid">Project ID</param>
        [Preserve]
        public GetContentStatusVersionRequest(string bucketid, string entryid, string versionid, string projectid)
        {
            Bucketid = bucketid;

            Entryid = entryid;

            Versionid = versionid;

            Projectid = projectid;

            PathAndQueryParams = $"/api/ccd/management/v1/projects/{projectid}/buckets/{bucketid}/entries/{entryid}/versions/{versionid}/content";


        }

        /// <summary>
        /// Helper function for constructing URL from request base path and
        /// query params.
        /// </summary>
        /// <param name="requestBasePath"></param>
        /// <returns></returns>
        public string ConstructUrl(string requestBasePath)
        {
            return requestBasePath + PathAndQueryParams;
        }

        /// <summary>
        /// Helper for constructing the request body.
        /// </summary>
        /// <returns>A list of IMultipartFormSection representing the request body.</returns>
        public byte[] ConstructBody()
        {
            return null;
        }

        /// <summary>
        /// Helper function for constructing the headers.
        /// </summary>
        /// <param name="operationConfiguration">The operation configuration to use.</param>
        /// <returns>A dictionary representing the request headers.</returns>
        public Dictionary<string, string> ConstructHeaders(Configuration operationConfiguration = null)
        {
            var headers = new Dictionary<string, string>();

            // Analytics headers
            headers.Add("Unity-Client-Version", Application.unityVersion);
            headers.Add("Unity-Client-Mode", Scheduler.EngineStateHelper.IsPlaying ? "play" : "edit");

            string[] contentTypes = {
            };

            string[] accepts = {
                "application/problem+json"
            };

            var acceptHeader = GenerateAcceptHeader(accepts);
            if (!string.IsNullOrEmpty(acceptHeader))
            {
                headers.Add("Accept", acceptHeader);
            }
            var httpMethod = "HEAD";
            var contentTypeHeader = GenerateContentTypeHeader(contentTypes);
            if (!string.IsNullOrEmpty(contentTypeHeader))
            {
                headers.Add("Content-Type", contentTypeHeader);
            }
            else if (httpMethod == "POST" || httpMethod == "PATCH")
            {
                headers.Add("Content-Type", "application/json");
            }


            // We also check if there are headers that are defined as part of
            // the request configuration.
            if (operationConfiguration != null && operationConfiguration.Headers != null)
            {
                foreach (var pair in operationConfiguration.Headers)
                {
                    headers[pair.Key] = pair.Value;
                }
            }

            return headers;
        }
    }
    /// <summary>
    /// GetContentStatusVersionEnvRequest
    /// Get content status for version of entry
    /// </summary>
    [Preserve]
    internal class GetContentStatusVersionEnvRequest : ContentApiBaseRequest
    {
        /// <summary>Accessor for environmentid </summary>
        [Preserve]
        public string Environmentid { get; }
        /// <summary>Accessor for bucketid </summary>
        [Preserve]
        public string Bucketid { get; }
        /// <summary>Accessor for entryid </summary>
        [Preserve]
        public string Entryid { get; }
        /// <summary>Accessor for versionid </summary>
        [Preserve]
        public string Versionid { get; }
        /// <summary>Accessor for projectid </summary>
        [Preserve]
        public string Projectid { get; }
        string PathAndQueryParams;

        /// <summary>
        /// GetContentStatusVersionEnv Request Object.
        /// Get content status for version of entry
        /// </summary>
        /// <param name="environmentid">Environment ID</param>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="entryid">Entry ID</param>
        /// <param name="versionid">Version ID</param>
        /// <param name="projectid">Project ID</param>
        [Preserve]
        public GetContentStatusVersionEnvRequest(string environmentid, string bucketid, string entryid, string versionid, string projectid)
        {
            Environmentid = environmentid;

            Bucketid = bucketid;

            Entryid = entryid;

            Versionid = versionid;

            Projectid = projectid;

            PathAndQueryParams = $"/api/ccd/management/v1/projects/{projectid}/environments/{environmentid}/buckets/{bucketid}/entries/{entryid}/versions/{versionid}/content";


        }

        /// <summary>
        /// Helper function for constructing URL from request base path and
        /// query params.
        /// </summary>
        /// <param name="requestBasePath"></param>
        /// <returns></returns>
        public string ConstructUrl(string requestBasePath)
        {
            return requestBasePath + PathAndQueryParams;
        }

        /// <summary>
        /// Helper for constructing the request body.
        /// </summary>
        /// <returns>A list of IMultipartFormSection representing the request body.</returns>
        public byte[] ConstructBody()
        {
            return null;
        }

        /// <summary>
        /// Helper function for constructing the headers.
        /// </summary>
        /// <param name="operationConfiguration">The operation configuration to use.</param>
        /// <returns>A dictionary representing the request headers.</returns>
        public Dictionary<string, string> ConstructHeaders(Configuration operationConfiguration = null)
        {
            var headers = new Dictionary<string, string>();

            // Analytics headers
            headers.Add("Unity-Client-Version", Application.unityVersion);
            headers.Add("Unity-Client-Mode", Scheduler.EngineStateHelper.IsPlaying ? "play" : "edit");

            string[] contentTypes = {
            };

            string[] accepts = {
                "application/problem+json"
            };

            var acceptHeader = GenerateAcceptHeader(accepts);
            if (!string.IsNullOrEmpty(acceptHeader))
            {
                headers.Add("Accept", acceptHeader);
            }
            var httpMethod = "HEAD";
            var contentTypeHeader = GenerateContentTypeHeader(contentTypes);
            if (!string.IsNullOrEmpty(contentTypeHeader))
            {
                headers.Add("Content-Type", contentTypeHeader);
            }
            else if (httpMethod == "POST" || httpMethod == "PATCH")
            {
                headers.Add("Content-Type", "application/json");
            }


            // We also check if there are headers that are defined as part of
            // the request configuration.
            if (operationConfiguration != null && operationConfiguration.Headers != null)
            {
                foreach (var pair in operationConfiguration.Headers)
                {
                    headers[pair.Key] = pair.Value;
                }
            }

            return headers;
        }
    }
    /// <summary>
    /// GetContentVersionRequest
    /// Get content for version of entry
    /// </summary>
    [Preserve]
    internal class GetContentVersionRequest : ContentApiBaseRequest
    {
        /// <summary>Accessor for bucketid </summary>
        [Preserve]
        public string Bucketid { get; }
        /// <summary>Accessor for entryid </summary>
        [Preserve]
        public string Entryid { get; }
        /// <summary>Accessor for versionid </summary>
        [Preserve]
        public string Versionid { get; }
        /// <summary>Accessor for projectid </summary>
        [Preserve]
        public string Projectid { get; }
        string PathAndQueryParams;

        /// <summary>
        /// GetContentVersion Request Object.
        /// Get content for version of entry
        /// </summary>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="entryid">Entry ID</param>
        /// <param name="versionid">Version ID</param>
        /// <param name="projectid">Project ID</param>
        [Preserve]
        public GetContentVersionRequest(string bucketid, string entryid, string versionid, string projectid)
        {
            Bucketid = bucketid;

            Entryid = entryid;

            Versionid = versionid;

            Projectid = projectid;

            PathAndQueryParams = $"/api/ccd/management/v1/projects/{projectid}/buckets/{bucketid}/entries/{entryid}/versions/{versionid}/content";


        }

        /// <summary>
        /// Helper function for constructing URL from request base path and
        /// query params.
        /// </summary>
        /// <param name="requestBasePath"></param>
        /// <returns></returns>
        public string ConstructUrl(string requestBasePath)
        {
            return requestBasePath + PathAndQueryParams;
        }

        /// <summary>
        /// Helper for constructing the request body.
        /// </summary>
        /// <returns>A list of IMultipartFormSection representing the request body.</returns>
        public byte[] ConstructBody()
        {
            return null;
        }

        /// <summary>
        /// Helper function for constructing the headers.
        /// </summary>
        /// <param name="operationConfiguration">The operation configuration to use.</param>
        /// <returns>A dictionary representing the request headers.</returns>
        public Dictionary<string, string> ConstructHeaders(Configuration operationConfiguration = null)
        {
            var headers = new Dictionary<string, string>();

            // Analytics headers
            headers.Add("Unity-Client-Version", Application.unityVersion);
            headers.Add("Unity-Client-Mode", Scheduler.EngineStateHelper.IsPlaying ? "play" : "edit");

            string[] contentTypes = {
            };

            string[] accepts = {
                "application/octet-stream",
                "application/problem+json"
            };

            var acceptHeader = GenerateAcceptHeader(accepts);
            if (!string.IsNullOrEmpty(acceptHeader))
            {
                headers.Add("Accept", acceptHeader);
            }
            var httpMethod = "GET";
            var contentTypeHeader = GenerateContentTypeHeader(contentTypes);
            if (!string.IsNullOrEmpty(contentTypeHeader))
            {
                headers.Add("Content-Type", contentTypeHeader);
            }
            else if (httpMethod == "POST" || httpMethod == "PATCH")
            {
                headers.Add("Content-Type", "application/json");
            }


            // We also check if there are headers that are defined as part of
            // the request configuration.
            if (operationConfiguration != null && operationConfiguration.Headers != null)
            {
                foreach (var pair in operationConfiguration.Headers)
                {
                    headers[pair.Key] = pair.Value;
                }
            }

            return headers;
        }
    }
    /// <summary>
    /// GetContentVersionEnvRequest
    /// Get content for version of entry
    /// </summary>
    [Preserve]
    internal class GetContentVersionEnvRequest : ContentApiBaseRequest
    {
        /// <summary>Accessor for environmentid </summary>
        [Preserve]
        public string Environmentid { get; }
        /// <summary>Accessor for bucketid </summary>
        [Preserve]
        public string Bucketid { get; }
        /// <summary>Accessor for entryid </summary>
        [Preserve]
        public string Entryid { get; }
        /// <summary>Accessor for versionid </summary>
        [Preserve]
        public string Versionid { get; }
        /// <summary>Accessor for projectid </summary>
        [Preserve]
        public string Projectid { get; }
        string PathAndQueryParams;

        /// <summary>
        /// GetContentVersionEnv Request Object.
        /// Get content for version of entry
        /// </summary>
        /// <param name="environmentid">Environment ID</param>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="entryid">Entry ID</param>
        /// <param name="versionid">Version ID</param>
        /// <param name="projectid">Project ID</param>
        [Preserve]
        public GetContentVersionEnvRequest(string environmentid, string bucketid, string entryid, string versionid, string projectid)
        {
            Environmentid = environmentid;

            Bucketid = bucketid;

            Entryid = entryid;

            Versionid = versionid;

            Projectid = projectid;

            PathAndQueryParams = $"/api/ccd/management/v1/projects/{projectid}/environments/{environmentid}/buckets/{bucketid}/entries/{entryid}/versions/{versionid}/content";


        }

        /// <summary>
        /// Helper function for constructing URL from request base path and
        /// query params.
        /// </summary>
        /// <param name="requestBasePath"></param>
        /// <returns></returns>
        public string ConstructUrl(string requestBasePath)
        {
            return requestBasePath + PathAndQueryParams;
        }

        /// <summary>
        /// Helper for constructing the request body.
        /// </summary>
        /// <returns>A list of IMultipartFormSection representing the request body.</returns>
        public byte[] ConstructBody()
        {
            return null;
        }

        /// <summary>
        /// Helper function for constructing the headers.
        /// </summary>
        /// <param name="operationConfiguration">The operation configuration to use.</param>
        /// <returns>A dictionary representing the request headers.</returns>
        public Dictionary<string, string> ConstructHeaders(Configuration operationConfiguration = null)
        {
            var headers = new Dictionary<string, string>();

            // Analytics headers
            headers.Add("Unity-Client-Version", Application.unityVersion);
            headers.Add("Unity-Client-Mode", Scheduler.EngineStateHelper.IsPlaying ? "play" : "edit");

            string[] contentTypes = {
            };

            string[] accepts = {
                "application/octet-stream",
                "application/problem+json"
            };

            var acceptHeader = GenerateAcceptHeader(accepts);
            if (!string.IsNullOrEmpty(acceptHeader))
            {
                headers.Add("Accept", acceptHeader);
            }
            var httpMethod = "GET";
            var contentTypeHeader = GenerateContentTypeHeader(contentTypes);
            if (!string.IsNullOrEmpty(contentTypeHeader))
            {
                headers.Add("Content-Type", contentTypeHeader);
            }
            else if (httpMethod == "POST" || httpMethod == "PATCH")
            {
                headers.Add("Content-Type", "application/json");
            }


            // We also check if there are headers that are defined as part of
            // the request configuration.
            if (operationConfiguration != null && operationConfiguration.Headers != null)
            {
                foreach (var pair in operationConfiguration.Headers)
                {
                    headers[pair.Key] = pair.Value;
                }
            }

            return headers;
        }
    }
    /// <summary>
    /// UploadContentRequest
    /// Upload content for entry
    /// </summary>
    [Preserve]
    internal class UploadContentRequest : ContentApiBaseRequest
    {
        /// <summary>Accessor for bucketid </summary>
        [Preserve]
        public string Bucketid { get; }
        /// <summary>Accessor for entryid </summary>
        [Preserve]
        public string Entryid { get; }
        /// <summary>Accessor for projectid </summary>
        [Preserve]
        public string Projectid { get; }
        /// <summary>Accessor for file </summary>
        [Preserve]
        public System.IO.Stream File { get; }
        /// <summary>Accessor for versionid </summary>
        [Preserve]
        public string Versionid { get; }
        string PathAndQueryParams;

        /// <summary>
        /// UploadContent Request Object.
        /// Upload content for entry
        /// </summary>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="entryid">Entry ID</param>
        /// <param name="projectid">Project ID</param>
        /// <param name="file">File content</param>
        /// <param name="versionid">Version ID</param>
        [Preserve]
        public UploadContentRequest(string bucketid, string entryid, string projectid, System.IO.Stream file, string versionid = default(string))
        {
            Bucketid = bucketid;

            Entryid = entryid;

            Projectid = projectid;

            File = file;
            Versionid = versionid;
            PathAndQueryParams = $"/api/ccd/management/v1/projects/{projectid}/buckets/{bucketid}/entries/{entryid}/content";

            List<string> queryParams = new List<string>();

            if(!string.IsNullOrEmpty(Versionid))
            {
                queryParams = AddParamsToQueryParams(queryParams, "versionid", Versionid);
            }
            if (queryParams.Count > 0)
            {
                PathAndQueryParams = $"{PathAndQueryParams}?{string.Join("&", queryParams)}";
            }
        }

        /// <summary>
        /// Helper function for constructing URL from request base path and
        /// query params.
        /// </summary>
        /// <param name="requestBasePath"></param>
        /// <returns></returns>
        public string ConstructUrl(string requestBasePath)
        {
            return requestBasePath + PathAndQueryParams;
        }

        /// <summary>
        /// Helper for constructing the request body.
        /// </summary>
        /// <returns>A list of IMultipartFormSection representing the request body.</returns>
        public List<IMultipartFormSection> ConstructBody()
        {
            List<IMultipartFormSection> requestParts = new List<IMultipartFormSection>();
            requestParts.Add(GenerateMultipartFormFileSection("file", File, "application/octet-stream"));
            
            return requestParts;
        }

        /// <summary>
        /// Helper function for constructing the headers.
        /// </summary>
        /// <param name="operationConfiguration">The operation configuration to use.</param>
        /// <returns>A dictionary representing the request headers.</returns>
        public Dictionary<string, string> ConstructHeaders(Configuration operationConfiguration = null)
        {
            var headers = new Dictionary<string, string>();

            // Analytics headers
            headers.Add("Unity-Client-Version", Application.unityVersion);
            headers.Add("Unity-Client-Mode", Scheduler.EngineStateHelper.IsPlaying ? "play" : "edit");


            string[] accepts = {
                "application/problem+json"
            };

            var acceptHeader = GenerateAcceptHeader(accepts);
            if (!string.IsNullOrEmpty(acceptHeader))
            {
                headers.Add("Accept", acceptHeader);
            }


            // We also check if there are headers that are defined as part of
            // the request configuration.
            if (operationConfiguration != null && operationConfiguration.Headers != null)
            {
                foreach (var pair in operationConfiguration.Headers)
                {
                    headers[pair.Key] = pair.Value;
                }
            }

            return headers;
        }
    }
    /// <summary>
    /// UploadContentEnvRequest
    /// Upload content for entry
    /// </summary>
    [Preserve]
    internal class UploadContentEnvRequest : ContentApiBaseRequest
    {
        /// <summary>Accessor for environmentid </summary>
        [Preserve]
        public string Environmentid { get; }
        /// <summary>Accessor for bucketid </summary>
        [Preserve]
        public string Bucketid { get; }
        /// <summary>Accessor for entryid </summary>
        [Preserve]
        public string Entryid { get; }
        /// <summary>Accessor for projectid </summary>
        [Preserve]
        public string Projectid { get; }
        /// <summary>Accessor for file </summary>
        [Preserve]
        public System.IO.Stream File { get; }
        /// <summary>Accessor for versionid </summary>
        [Preserve]
        public string Versionid { get; }
        string PathAndQueryParams;

        /// <summary>
        /// UploadContentEnv Request Object.
        /// Upload content for entry
        /// </summary>
        /// <param name="environmentid">Environment ID</param>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="entryid">Entry ID</param>
        /// <param name="projectid">Project ID</param>
        /// <param name="file">File content</param>
        /// <param name="versionid">Version ID</param>
        [Preserve]
        public UploadContentEnvRequest(string environmentid, string bucketid, string entryid, string projectid, System.IO.Stream file, string versionid = default(string))
        {
            Environmentid = environmentid;

            Bucketid = bucketid;

            Entryid = entryid;

            Projectid = projectid;

            File = file;
            Versionid = versionid;
            PathAndQueryParams = $"/api/ccd/management/v1/projects/{projectid}/environments/{environmentid}/buckets/{bucketid}/entries/{entryid}/content";

            List<string> queryParams = new List<string>();

            if(!string.IsNullOrEmpty(Versionid))
            {
                queryParams = AddParamsToQueryParams(queryParams, "versionid", Versionid);
            }
            if (queryParams.Count > 0)
            {
                PathAndQueryParams = $"{PathAndQueryParams}?{string.Join("&", queryParams)}";
            }
        }

        /// <summary>
        /// Helper function for constructing URL from request base path and
        /// query params.
        /// </summary>
        /// <param name="requestBasePath"></param>
        /// <returns></returns>
        public string ConstructUrl(string requestBasePath)
        {
            return requestBasePath + PathAndQueryParams;
        }

        /// <summary>
        /// Helper for constructing the request body.
        /// </summary>
        /// <returns>A list of IMultipartFormSection representing the request body.</returns>
        public List<IMultipartFormSection> ConstructBody()
        {
            List<IMultipartFormSection> requestParts = new List<IMultipartFormSection>();
            requestParts.Add(GenerateMultipartFormFileSection("file", File, "application/octet-stream"));
            
            return requestParts;
        }

        /// <summary>
        /// Helper function for constructing the headers.
        /// </summary>
        /// <param name="operationConfiguration">The operation configuration to use.</param>
        /// <returns>A dictionary representing the request headers.</returns>
        public Dictionary<string, string> ConstructHeaders(Configuration operationConfiguration = null)
        {
            var headers = new Dictionary<string, string>();

            // Analytics headers
            headers.Add("Unity-Client-Version", Application.unityVersion);
            headers.Add("Unity-Client-Mode", Scheduler.EngineStateHelper.IsPlaying ? "play" : "edit");


            string[] accepts = {
                "application/problem+json"
            };

            var acceptHeader = GenerateAcceptHeader(accepts);
            if (!string.IsNullOrEmpty(acceptHeader))
            {
                headers.Add("Accept", acceptHeader);
            }


            // We also check if there are headers that are defined as part of
            // the request configuration.
            if (operationConfiguration != null && operationConfiguration.Headers != null)
            {
                foreach (var pair in operationConfiguration.Headers)
                {
                    headers[pair.Key] = pair.Value;
                }
            }

            return headers;
        }
    }
}
