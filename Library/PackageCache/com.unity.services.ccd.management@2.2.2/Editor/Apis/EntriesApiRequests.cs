//-----------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by the C# SDK Code Generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using UnityEngine;
using UnityEngine.Networking;
using UnityEngine.Scripting;
using Unity.Services.Ccd.Management.Models;
using Unity.Services.Ccd.Management.Scheduler;


namespace Unity.Services.Ccd.Management.Entries
{
    internal static class JsonSerialization
    {
        public static byte[] Serialize<T>(T obj)
        {
            return Encoding.UTF8.GetBytes(SerializeToString(obj));
        }

        public static string SerializeToString<T>(T obj)
        {
            return JsonConvert.SerializeObject(obj, new JsonSerializerSettings{ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Ignore});
        }
    }

    /// <summary>
    /// EntriesApiBaseRequest class
    /// </summary>
    [Preserve]
    internal class EntriesApiBaseRequest
    {
        /// <summary>
        /// Helper function to add a provided key and value to the provided
        /// query params and to escape the values correctly if it is a URL.
        /// </summary>
        /// <param name="queryParams">A `List/<string/>` of the query parameters.</param>
        /// <param name="key">The key to be added.</param>
        /// <param name="value">The value to be added.</param>
        /// <returns>Returns a `List/<string/>` with the `key` and `value` added to the provided `queryParams`.</returns>
        [Preserve]
        public List<string> AddParamsToQueryParams(List<string> queryParams, string key, string value)
        {
            key = UnityWebRequest.EscapeURL(key);
            value = UnityWebRequest.EscapeURL(value);
            queryParams.Add($"{key}={value}");

            return queryParams;
        }

        /// <summary>
        /// Helper function to add a provided key and list of values to the
        /// provided query params and to escape the values correctly if it is a
        /// URL.
        /// </summary>
        /// <param name="queryParams">A `List/<string/>` of the query parameters.</param>
        /// <param name="key">The key to be added.</param>
        /// <param name="values">List of values to be added.</param>
        /// <param name="style">string for defining the style, currently unused.</param>
        /// <param name="explode">True if query params should be escaped and added separately.</param>
        /// <returns>Returns a `List/<string/>`</returns>
        [Preserve]
        public List<string> AddParamsToQueryParams(List<string> queryParams, string key, List<string> values, string style, bool explode)
        {
            if (explode)
            {
                foreach(var value in values)
                {
                    string escapedValue = UnityWebRequest.EscapeURL(value);
                    queryParams.Add($"{UnityWebRequest.EscapeURL(key)}={escapedValue}");
                }
            }
            else
            {
                string paramString = $"{UnityWebRequest.EscapeURL(key)}=";
                foreach(var value in values)
                {
                    paramString += UnityWebRequest.EscapeURL(value) + ",";
                }
                paramString = paramString.Remove(paramString.Length - 1);
                queryParams.Add(paramString);
            }

            return queryParams;
        }

        /// <summary>
        /// Helper function to add a provided map of keys and values, representing a model, to the
        /// provided query params.
        /// </summary>
        /// <param name="queryParams">A `List/<string/>` of the query parameters.</param>
        /// <param name="modelVars">A `Dictionary` representing the vars of the model</param>
        /// <returns>Returns a `List/<string/>`</returns>
        [Preserve]
        public List<string> AddParamsToQueryParams(List<string> queryParams, Dictionary<string, string> modelVars)
        {
            foreach(var key in modelVars.Keys)
            {
                string escapedValue = UnityWebRequest.EscapeURL(modelVars[key]);
                queryParams.Add($"{UnityWebRequest.EscapeURL(key)}={escapedValue}");
            }

            return queryParams;
        }

        /// <summary>
        /// Helper function to add a provided key and value to the provided
        /// query params and to escape the values correctly if it is a URL.
        /// </summary>
        /// <param name="queryParams">A `List/<string/>` of the query parameters.</param>
        /// <param name="key">The key to be added.</param>
        /// <typeparam name="T">The type of the value to be added.</typeparam>
        /// <param name="value">The value to be added.</param>
        /// <returns>Returns a `List/<string/>`</returns>
        [Preserve]
        public List<string> AddParamsToQueryParams<T>(List<string> queryParams, string key, T value)
        {
            if (queryParams == null)
            {
                queryParams = new List<string>();
            }

            key = UnityWebRequest.EscapeURL(key);
            string valueString = UnityWebRequest.EscapeURL(value.ToString());
            queryParams.Add($"{key}={valueString}");
            return queryParams;
        }

        /// <summary>
        /// Constructs a string representing an array path parameter.
        /// </summary>
        /// <param name="pathParam">The list of values to convert to string.</param>
        /// <returns>String representing the param.</returns>
        [Preserve]
        public string GetPathParamString(List<string> pathParam)
        {
            string paramString = "";
            foreach(var value in pathParam)
            {
                paramString += UnityWebRequest.EscapeURL(value) + ",";
            }
            paramString = paramString.Remove(paramString.Length - 1);
            return paramString;
        }

        /// <summary>
        /// Constructs the body of the request based on IO stream.
        /// </summary>
        /// <param name="stream">The IO stream to use.</param>
        /// <returns>Byte array representing the body.</returns>
        public byte[] ConstructBody(System.IO.Stream stream)
        {
            if (stream != null)
            {
                using (System.IO.MemoryStream ms = new System.IO.MemoryStream())
                {
                    stream.CopyTo(ms);
                    return ms.ToArray();
                }
            }
            return null;
        }

        /// <summary>
        /// Construct the request body based on string value.
        /// </summary>
        /// <param name="s">The input body.</param>
        /// <returns>Byte array representing the body.</returns>
        public byte[] ConstructBody(string s)
        {
            return System.Text.Encoding.UTF8.GetBytes(s);
        }

        /// <summary>
        /// Construct request body based on generic object.
        /// </summary>
        /// <param name="o">The object to use.</param>
        /// <returns>Byte array representing the body.</returns>
        public byte[] ConstructBody(object o)
        {
            return JsonSerialization.Serialize(o);
        }

        /// <summary>
        /// Generate an accept header.
        /// </summary>
        /// <param name="accepts">list of accepts objects.</param>
        /// <returns>The generated accept header.</returns>
        public string GenerateAcceptHeader(string[] accepts)
        {
            if (accepts.Length == 0)
            {
                return null;
            }
            for (int i = 0; i < accepts.Length; ++i)
            {
                if (string.Equals(accepts[i], "application/json", System.StringComparison.OrdinalIgnoreCase))
                {
                    return "application/json";
                }
            }
            return string.Join(", ", accepts);
        }

        private static readonly Regex JsonRegex = new Regex(@"application\/json(;\s)?((charset=utf8|q=[0-1]\.\d)(\s)?)*");

        /// <summary>
        /// Generate Content Type Header.
        /// </summary>
        /// <param name="contentTypes">The content types.</param>
        /// <returns>The Content Type Header.</returns>
        public string GenerateContentTypeHeader(string[] contentTypes)
        {
            if (contentTypes.Length == 0)
            {
                return null;
            }

            for(int i = 0; i < contentTypes.Length; ++i)
            {
                if (!string.IsNullOrWhiteSpace(contentTypes[i]) && JsonRegex.IsMatch(contentTypes[i]))
                {
                    return contentTypes[i];
                }
            }
            return contentTypes[0];
        }

        /// <summary>
        /// Generate multipart form file section.
        /// </summary>
        /// <param name="paramName">The parameter name.</param>
        /// <param name="stream">The file stream to use.</param>
        /// <param name="contentType">The content type.</param>
        /// <returns>Returns a multipart form section.</returns>
        public IMultipartFormSection GenerateMultipartFormFileSection(string paramName, System.IO.FileStream stream, string contentType)
        {
            return new MultipartFormFileSection(paramName, ConstructBody(stream), GetFileName(stream.Name), contentType);
        }

        /// <summary>
        /// Generate multipart form file section.
        /// </summary>
        /// <param name="paramName">The parameter name.</param>
        /// <param name="stream">The IO stream to use.</param>
        /// <param name="contentType">The content type.</param>
        /// <returns>Returns a multipart form section.</returns>
        public IMultipartFormSection GenerateMultipartFormFileSection(string paramName, System.IO.Stream stream, string contentType)
        {
            return new MultipartFormFileSection(paramName, ConstructBody(stream), Guid.NewGuid().ToString(), contentType);
        }

        private string GetFileName(string filePath)
        {
            return System.IO.Path.GetFileName(filePath);
        }
    }

    /// <summary>
    /// CreateEntryRequest
    /// Create entry
    /// </summary>
    [Preserve]
    internal class CreateEntryRequest : EntriesApiBaseRequest
    {
        /// <summary>Accessor for bucketid </summary>
        [Preserve]
        public string Bucketid { get; }
        /// <summary>Accessor for projectid </summary>
        [Preserve]
        public string Projectid { get; }
        /// <summary>Accessor for ccdEntryCreate </summary>
        [Preserve]
        public Unity.Services.Ccd.Management.Models.CcdEntryCreate CcdEntryCreate { get; }
        string PathAndQueryParams;

        /// <summary>
        /// CreateEntry Request Object.
        /// Create entry
        /// </summary>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="projectid">Project ID</param>
        /// <param name="ccdEntryCreate">Entry</param>
        [Preserve]
        public CreateEntryRequest(string bucketid, string projectid, Unity.Services.Ccd.Management.Models.CcdEntryCreate ccdEntryCreate)
        {
            Bucketid = bucketid;

            Projectid = projectid;

            CcdEntryCreate = ccdEntryCreate;
            PathAndQueryParams = $"/api/ccd/management/v1/projects/{projectid}/buckets/{bucketid}/entries";


        }

        /// <summary>
        /// Helper function for constructing URL from request base path and
        /// query params.
        /// </summary>
        /// <param name="requestBasePath"></param>
        /// <returns></returns>
        public string ConstructUrl(string requestBasePath)
        {
            return requestBasePath + PathAndQueryParams;
        }

        /// <summary>
        /// Helper for constructing the request body.
        /// </summary>
        /// <returns>A list of IMultipartFormSection representing the request body.</returns>
        public byte[] ConstructBody()
        {
            return ConstructBody(CcdEntryCreate);
        }

        /// <summary>
        /// Helper function for constructing the headers.
        /// </summary>
        /// <param name="operationConfiguration">The operation configuration to use.</param>
        /// <returns>A dictionary representing the request headers.</returns>
        public Dictionary<string, string> ConstructHeaders(Configuration operationConfiguration = null)
        {
            var headers = new Dictionary<string, string>();

            // Analytics headers
            headers.Add("Unity-Client-Version", Application.unityVersion);
            headers.Add("Unity-Client-Mode", Scheduler.EngineStateHelper.IsPlaying ? "play" : "edit");

            string[] contentTypes = {
                "application/json"
            };

            string[] accepts = {
                "application/json",
                "application/problem+json"
            };

            var acceptHeader = GenerateAcceptHeader(accepts);
            if (!string.IsNullOrEmpty(acceptHeader))
            {
                headers.Add("Accept", acceptHeader);
            }
            var httpMethod = "POST";
            var contentTypeHeader = GenerateContentTypeHeader(contentTypes);
            if (!string.IsNullOrEmpty(contentTypeHeader))
            {
                headers.Add("Content-Type", contentTypeHeader);
            }
            else if (httpMethod == "POST" || httpMethod == "PATCH")
            {
                headers.Add("Content-Type", "application/json");
            }


            // We also check if there are headers that are defined as part of
            // the request configuration.
            if (operationConfiguration != null && operationConfiguration.Headers != null)
            {
                foreach (var pair in operationConfiguration.Headers)
                {
                    headers[pair.Key] = pair.Value;
                }
            }

            return headers;
        }
    }
    /// <summary>
    /// CreateEntryEnvRequest
    /// Create entry
    /// </summary>
    [Preserve]
    internal class CreateEntryEnvRequest : EntriesApiBaseRequest
    {
        /// <summary>Accessor for environmentid </summary>
        [Preserve]
        public string Environmentid { get; }
        /// <summary>Accessor for bucketid </summary>
        [Preserve]
        public string Bucketid { get; }
        /// <summary>Accessor for projectid </summary>
        [Preserve]
        public string Projectid { get; }
        /// <summary>Accessor for ccdEntryCreate </summary>
        [Preserve]
        public Unity.Services.Ccd.Management.Models.CcdEntryCreate CcdEntryCreate { get; }
        string PathAndQueryParams;

        /// <summary>
        /// CreateEntryEnv Request Object.
        /// Create entry
        /// </summary>
        /// <param name="environmentid">Environment ID</param>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="projectid">Project ID</param>
        /// <param name="ccdEntryCreate">Entry</param>
        [Preserve]
        public CreateEntryEnvRequest(string environmentid, string bucketid, string projectid, Unity.Services.Ccd.Management.Models.CcdEntryCreate ccdEntryCreate)
        {
            Environmentid = environmentid;

            Bucketid = bucketid;

            Projectid = projectid;

            CcdEntryCreate = ccdEntryCreate;
            PathAndQueryParams = $"/api/ccd/management/v1/projects/{projectid}/environments/{environmentid}/buckets/{bucketid}/entries";


        }

        /// <summary>
        /// Helper function for constructing URL from request base path and
        /// query params.
        /// </summary>
        /// <param name="requestBasePath"></param>
        /// <returns></returns>
        public string ConstructUrl(string requestBasePath)
        {
            return requestBasePath + PathAndQueryParams;
        }

        /// <summary>
        /// Helper for constructing the request body.
        /// </summary>
        /// <returns>A list of IMultipartFormSection representing the request body.</returns>
        public byte[] ConstructBody()
        {
            return ConstructBody(CcdEntryCreate);
        }

        /// <summary>
        /// Helper function for constructing the headers.
        /// </summary>
        /// <param name="operationConfiguration">The operation configuration to use.</param>
        /// <returns>A dictionary representing the request headers.</returns>
        public Dictionary<string, string> ConstructHeaders(Configuration operationConfiguration = null)
        {
            var headers = new Dictionary<string, string>();

            // Analytics headers
            headers.Add("Unity-Client-Version", Application.unityVersion);
            headers.Add("Unity-Client-Mode", Scheduler.EngineStateHelper.IsPlaying ? "play" : "edit");

            string[] contentTypes = {
                "application/json"
            };

            string[] accepts = {
                "application/json",
                "application/problem+json"
            };

            var acceptHeader = GenerateAcceptHeader(accepts);
            if (!string.IsNullOrEmpty(acceptHeader))
            {
                headers.Add("Accept", acceptHeader);
            }
            var httpMethod = "POST";
            var contentTypeHeader = GenerateContentTypeHeader(contentTypes);
            if (!string.IsNullOrEmpty(contentTypeHeader))
            {
                headers.Add("Content-Type", contentTypeHeader);
            }
            else if (httpMethod == "POST" || httpMethod == "PATCH")
            {
                headers.Add("Content-Type", "application/json");
            }


            // We also check if there are headers that are defined as part of
            // the request configuration.
            if (operationConfiguration != null && operationConfiguration.Headers != null)
            {
                foreach (var pair in operationConfiguration.Headers)
                {
                    headers[pair.Key] = pair.Value;
                }
            }

            return headers;
        }
    }
    /// <summary>
    /// CreateOrUpdateEntryByPathRequest
    /// Create or update entry by path
    /// </summary>
    [Preserve]
    internal class CreateOrUpdateEntryByPathRequest : EntriesApiBaseRequest
    {
        /// <summary>Accessor for bucketid </summary>
        [Preserve]
        public string Bucketid { get; }
        /// <summary>Accessor for path </summary>
        [Preserve]
        public string Path { get; }
        /// <summary>Accessor for projectid </summary>
        [Preserve]
        public string Projectid { get; }
        /// <summary>Accessor for ccdEntryCreateByPath </summary>
        [Preserve]
        public Unity.Services.Ccd.Management.Models.CcdEntryCreateByPath CcdEntryCreateByPath { get; }
        /// <summary>Accessor for updateIfExists </summary>
        [Preserve]
        public bool? UpdateIfExists { get; }
        string PathAndQueryParams;

        /// <summary>
        /// CreateOrUpdateEntryByPath Request Object.
        /// Create or update entry by path
        /// </summary>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="path">Path</param>
        /// <param name="projectid">Project ID</param>
        /// <param name="ccdEntryCreateByPath">Entry</param>
        /// <param name="updateIfExists">Set to 'true' if you want to update the existing entries</param>
        [Preserve]
        public CreateOrUpdateEntryByPathRequest(string bucketid, string path, string projectid, Unity.Services.Ccd.Management.Models.CcdEntryCreateByPath ccdEntryCreateByPath, bool? updateIfExists = false)
        {
            Bucketid = bucketid;

            Path = path;
            Projectid = projectid;

            CcdEntryCreateByPath = ccdEntryCreateByPath;
            UpdateIfExists = updateIfExists;
            PathAndQueryParams = $"/api/ccd/management/v1/projects/{projectid}/buckets/{bucketid}/entry_by_path";

            List<string> queryParams = new List<string>();

            if(!string.IsNullOrEmpty(Path))
            {
                queryParams = AddParamsToQueryParams(queryParams, "path", Path);
            }
            var updateIfExistsStringValue = UpdateIfExists.ToString();
            queryParams = AddParamsToQueryParams(queryParams, "updateIfExists", updateIfExistsStringValue);
            if (queryParams.Count > 0)
            {
                PathAndQueryParams = $"{PathAndQueryParams}?{string.Join("&", queryParams)}";
            }
        }

        /// <summary>
        /// Helper function for constructing URL from request base path and
        /// query params.
        /// </summary>
        /// <param name="requestBasePath"></param>
        /// <returns></returns>
        public string ConstructUrl(string requestBasePath)
        {
            return requestBasePath + PathAndQueryParams;
        }

        /// <summary>
        /// Helper for constructing the request body.
        /// </summary>
        /// <returns>A list of IMultipartFormSection representing the request body.</returns>
        public byte[] ConstructBody()
        {
            return ConstructBody(CcdEntryCreateByPath);
        }

        /// <summary>
        /// Helper function for constructing the headers.
        /// </summary>
        /// <param name="operationConfiguration">The operation configuration to use.</param>
        /// <returns>A dictionary representing the request headers.</returns>
        public Dictionary<string, string> ConstructHeaders(Configuration operationConfiguration = null)
        {
            var headers = new Dictionary<string, string>();

            // Analytics headers
            headers.Add("Unity-Client-Version", Application.unityVersion);
            headers.Add("Unity-Client-Mode", Scheduler.EngineStateHelper.IsPlaying ? "play" : "edit");

            string[] contentTypes = {
                "application/json"
            };

            string[] accepts = {
                "application/json",
                "application/problem+json"
            };

            var acceptHeader = GenerateAcceptHeader(accepts);
            if (!string.IsNullOrEmpty(acceptHeader))
            {
                headers.Add("Accept", acceptHeader);
            }
            var httpMethod = "POST";
            var contentTypeHeader = GenerateContentTypeHeader(contentTypes);
            if (!string.IsNullOrEmpty(contentTypeHeader))
            {
                headers.Add("Content-Type", contentTypeHeader);
            }
            else if (httpMethod == "POST" || httpMethod == "PATCH")
            {
                headers.Add("Content-Type", "application/json");
            }


            // We also check if there are headers that are defined as part of
            // the request configuration.
            if (operationConfiguration != null && operationConfiguration.Headers != null)
            {
                foreach (var pair in operationConfiguration.Headers)
                {
                    headers[pair.Key] = pair.Value;
                }
            }

            return headers;
        }
    }
    /// <summary>
    /// CreateOrUpdateEntryByPathEnvRequest
    /// Create or update entry by path
    /// </summary>
    [Preserve]
    internal class CreateOrUpdateEntryByPathEnvRequest : EntriesApiBaseRequest
    {
        /// <summary>Accessor for environmentid </summary>
        [Preserve]
        public string Environmentid { get; }
        /// <summary>Accessor for bucketid </summary>
        [Preserve]
        public string Bucketid { get; }
        /// <summary>Accessor for path </summary>
        [Preserve]
        public string Path { get; }
        /// <summary>Accessor for projectid </summary>
        [Preserve]
        public string Projectid { get; }
        /// <summary>Accessor for ccdEntryCreateByPath </summary>
        [Preserve]
        public Unity.Services.Ccd.Management.Models.CcdEntryCreateByPath CcdEntryCreateByPath { get; }
        /// <summary>Accessor for updateIfExists </summary>
        [Preserve]
        public bool? UpdateIfExists { get; }
        string PathAndQueryParams;

        /// <summary>
        /// CreateOrUpdateEntryByPathEnv Request Object.
        /// Create or update entry by path
        /// </summary>
        /// <param name="environmentid">Environment ID</param>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="path">Path</param>
        /// <param name="projectid">Project ID</param>
        /// <param name="ccdEntryCreateByPath">Entry</param>
        /// <param name="updateIfExists">Set to 'true' if you want to update the existing entries</param>
        [Preserve]
        public CreateOrUpdateEntryByPathEnvRequest(string environmentid, string bucketid, string path, string projectid, Unity.Services.Ccd.Management.Models.CcdEntryCreateByPath ccdEntryCreateByPath, bool? updateIfExists = false)
        {
            Environmentid = environmentid;

            Bucketid = bucketid;

            Path = path;
            Projectid = projectid;

            CcdEntryCreateByPath = ccdEntryCreateByPath;
            UpdateIfExists = updateIfExists;
            PathAndQueryParams = $"/api/ccd/management/v1/projects/{projectid}/environments/{environmentid}/buckets/{bucketid}/entry_by_path";

            List<string> queryParams = new List<string>();

            if(!string.IsNullOrEmpty(Path))
            {
                queryParams = AddParamsToQueryParams(queryParams, "path", Path);
            }
            var updateIfExistsStringValue = UpdateIfExists.ToString();
            queryParams = AddParamsToQueryParams(queryParams, "updateIfExists", updateIfExistsStringValue);
            if (queryParams.Count > 0)
            {
                PathAndQueryParams = $"{PathAndQueryParams}?{string.Join("&", queryParams)}";
            }
        }

        /// <summary>
        /// Helper function for constructing URL from request base path and
        /// query params.
        /// </summary>
        /// <param name="requestBasePath"></param>
        /// <returns></returns>
        public string ConstructUrl(string requestBasePath)
        {
            return requestBasePath + PathAndQueryParams;
        }

        /// <summary>
        /// Helper for constructing the request body.
        /// </summary>
        /// <returns>A list of IMultipartFormSection representing the request body.</returns>
        public byte[] ConstructBody()
        {
            return ConstructBody(CcdEntryCreateByPath);
        }

        /// <summary>
        /// Helper function for constructing the headers.
        /// </summary>
        /// <param name="operationConfiguration">The operation configuration to use.</param>
        /// <returns>A dictionary representing the request headers.</returns>
        public Dictionary<string, string> ConstructHeaders(Configuration operationConfiguration = null)
        {
            var headers = new Dictionary<string, string>();

            // Analytics headers
            headers.Add("Unity-Client-Version", Application.unityVersion);
            headers.Add("Unity-Client-Mode", Scheduler.EngineStateHelper.IsPlaying ? "play" : "edit");

            string[] contentTypes = {
                "application/json"
            };

            string[] accepts = {
                "application/json",
                "application/problem+json"
            };

            var acceptHeader = GenerateAcceptHeader(accepts);
            if (!string.IsNullOrEmpty(acceptHeader))
            {
                headers.Add("Accept", acceptHeader);
            }
            var httpMethod = "POST";
            var contentTypeHeader = GenerateContentTypeHeader(contentTypes);
            if (!string.IsNullOrEmpty(contentTypeHeader))
            {
                headers.Add("Content-Type", contentTypeHeader);
            }
            else if (httpMethod == "POST" || httpMethod == "PATCH")
            {
                headers.Add("Content-Type", "application/json");
            }


            // We also check if there are headers that are defined as part of
            // the request configuration.
            if (operationConfiguration != null && operationConfiguration.Headers != null)
            {
                foreach (var pair in operationConfiguration.Headers)
                {
                    headers[pair.Key] = pair.Value;
                }
            }

            return headers;
        }
    }
    /// <summary>
    /// DeleteEntryRequest
    /// Delete entry
    /// </summary>
    [Preserve]
    internal class DeleteEntryRequest : EntriesApiBaseRequest
    {
        /// <summary>Accessor for bucketid </summary>
        [Preserve]
        public string Bucketid { get; }
        /// <summary>Accessor for entryid </summary>
        [Preserve]
        public string Entryid { get; }
        /// <summary>Accessor for projectid </summary>
        [Preserve]
        public string Projectid { get; }
        string PathAndQueryParams;

        /// <summary>
        /// DeleteEntry Request Object.
        /// Delete entry
        /// </summary>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="entryid">Entry ID</param>
        /// <param name="projectid">Project ID</param>
        [Preserve]
        public DeleteEntryRequest(string bucketid, string entryid, string projectid)
        {
            Bucketid = bucketid;

            Entryid = entryid;

            Projectid = projectid;

            PathAndQueryParams = $"/api/ccd/management/v1/projects/{projectid}/buckets/{bucketid}/entries/{entryid}";


        }

        /// <summary>
        /// Helper function for constructing URL from request base path and
        /// query params.
        /// </summary>
        /// <param name="requestBasePath"></param>
        /// <returns></returns>
        public string ConstructUrl(string requestBasePath)
        {
            return requestBasePath + PathAndQueryParams;
        }

        /// <summary>
        /// Helper for constructing the request body.
        /// </summary>
        /// <returns>A list of IMultipartFormSection representing the request body.</returns>
        public byte[] ConstructBody()
        {
            return null;
        }

        /// <summary>
        /// Helper function for constructing the headers.
        /// </summary>
        /// <param name="operationConfiguration">The operation configuration to use.</param>
        /// <returns>A dictionary representing the request headers.</returns>
        public Dictionary<string, string> ConstructHeaders(Configuration operationConfiguration = null)
        {
            var headers = new Dictionary<string, string>();

            // Analytics headers
            headers.Add("Unity-Client-Version", Application.unityVersion);
            headers.Add("Unity-Client-Mode", Scheduler.EngineStateHelper.IsPlaying ? "play" : "edit");

            string[] contentTypes = {
            };

            string[] accepts = {
                "application/problem+json"
            };

            var acceptHeader = GenerateAcceptHeader(accepts);
            if (!string.IsNullOrEmpty(acceptHeader))
            {
                headers.Add("Accept", acceptHeader);
            }
            var httpMethod = "DELETE";
            var contentTypeHeader = GenerateContentTypeHeader(contentTypes);
            if (!string.IsNullOrEmpty(contentTypeHeader))
            {
                headers.Add("Content-Type", contentTypeHeader);
            }
            else if (httpMethod == "POST" || httpMethod == "PATCH")
            {
                headers.Add("Content-Type", "application/json");
            }


            // We also check if there are headers that are defined as part of
            // the request configuration.
            if (operationConfiguration != null && operationConfiguration.Headers != null)
            {
                foreach (var pair in operationConfiguration.Headers)
                {
                    headers[pair.Key] = pair.Value;
                }
            }

            return headers;
        }
    }
    /// <summary>
    /// DeleteEntryEnvRequest
    /// Delete entry
    /// </summary>
    [Preserve]
    internal class DeleteEntryEnvRequest : EntriesApiBaseRequest
    {
        /// <summary>Accessor for environmentid </summary>
        [Preserve]
        public string Environmentid { get; }
        /// <summary>Accessor for bucketid </summary>
        [Preserve]
        public string Bucketid { get; }
        /// <summary>Accessor for entryid </summary>
        [Preserve]
        public string Entryid { get; }
        /// <summary>Accessor for projectid </summary>
        [Preserve]
        public string Projectid { get; }
        string PathAndQueryParams;

        /// <summary>
        /// DeleteEntryEnv Request Object.
        /// Delete entry
        /// </summary>
        /// <param name="environmentid">Environment ID</param>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="entryid">Entry ID</param>
        /// <param name="projectid">Project ID</param>
        [Preserve]
        public DeleteEntryEnvRequest(string environmentid, string bucketid, string entryid, string projectid)
        {
            Environmentid = environmentid;

            Bucketid = bucketid;

            Entryid = entryid;

            Projectid = projectid;

            PathAndQueryParams = $"/api/ccd/management/v1/projects/{projectid}/environments/{environmentid}/buckets/{bucketid}/entries/{entryid}";


        }

        /// <summary>
        /// Helper function for constructing URL from request base path and
        /// query params.
        /// </summary>
        /// <param name="requestBasePath"></param>
        /// <returns></returns>
        public string ConstructUrl(string requestBasePath)
        {
            return requestBasePath + PathAndQueryParams;
        }

        /// <summary>
        /// Helper for constructing the request body.
        /// </summary>
        /// <returns>A list of IMultipartFormSection representing the request body.</returns>
        public byte[] ConstructBody()
        {
            return null;
        }

        /// <summary>
        /// Helper function for constructing the headers.
        /// </summary>
        /// <param name="operationConfiguration">The operation configuration to use.</param>
        /// <returns>A dictionary representing the request headers.</returns>
        public Dictionary<string, string> ConstructHeaders(Configuration operationConfiguration = null)
        {
            var headers = new Dictionary<string, string>();

            // Analytics headers
            headers.Add("Unity-Client-Version", Application.unityVersion);
            headers.Add("Unity-Client-Mode", Scheduler.EngineStateHelper.IsPlaying ? "play" : "edit");

            string[] contentTypes = {
            };

            string[] accepts = {
                "application/problem+json"
            };

            var acceptHeader = GenerateAcceptHeader(accepts);
            if (!string.IsNullOrEmpty(acceptHeader))
            {
                headers.Add("Accept", acceptHeader);
            }
            var httpMethod = "DELETE";
            var contentTypeHeader = GenerateContentTypeHeader(contentTypes);
            if (!string.IsNullOrEmpty(contentTypeHeader))
            {
                headers.Add("Content-Type", contentTypeHeader);
            }
            else if (httpMethod == "POST" || httpMethod == "PATCH")
            {
                headers.Add("Content-Type", "application/json");
            }


            // We also check if there are headers that are defined as part of
            // the request configuration.
            if (operationConfiguration != null && operationConfiguration.Headers != null)
            {
                foreach (var pair in operationConfiguration.Headers)
                {
                    headers[pair.Key] = pair.Value;
                }
            }

            return headers;
        }
    }
    /// <summary>
    /// GetEntriesRequest
    /// Get entries for bucket
    /// </summary>
    [Preserve]
    internal class GetEntriesRequest : EntriesApiBaseRequest
    {
        /// <summary>Accessor for bucketid </summary>
        [Preserve]
        public string Bucketid { get; }
        /// <summary>Accessor for projectid </summary>
        [Preserve]
        public string Projectid { get; }
        /// <summary>Accessor for page </summary>
        [Preserve]
        public int? Page { get; }
        /// <summary>Accessor for startingAfter </summary>
        [Preserve]
        public System.Guid StartingAfter { get; }
        /// <summary>Accessor for perPage </summary>
        [Preserve]
        public int? PerPage { get; }
        /// <summary>Accessor for path </summary>
        [Preserve]
        public string Path { get; }
        /// <summary>Accessor for label </summary>
        [Preserve]
        public string Label { get; }
        /// <summary>Accessor for contentType </summary>
        [Preserve]
        public string ContentType { get; }
        /// <summary>Accessor for complete </summary>
        [Preserve]
        public bool? Complete { get; }
        /// <summary>Accessor for sortBy </summary>
        [Preserve]
        public string SortBy { get; }
        /// <summary>Accessor for sortOrder </summary>
        [Preserve]
        public string SortOrder { get; }
        string PathAndQueryParams;

        /// <summary>
        /// GetEntries Request Object.
        /// Get entries for bucket
        /// </summary>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="projectid">Project ID</param>
        /// <param name="page">Current Page</param>
        /// <param name="startingAfter">returns items listed after the named ID</param>
        /// <param name="perPage">Items Per Page</param>
        /// <param name="path">Path</param>
        /// <param name="label">Label</param>
        /// <param name="contentType">content type</param>
        /// <param name="complete">is content upload completed or not</param>
        /// <param name="sortBy">Sort By</param>
        /// <param name="sortOrder">Sort Order</param>
        [Preserve]
        public GetEntriesRequest(string bucketid, string projectid, int? page = default(int?), System.Guid startingAfter = default(System.Guid), int? perPage = 10, string path = default(string), string label = default(string), string contentType = default(string), bool? complete = default(bool?), string sortBy = default(string), string sortOrder = default(string))
        {
            Bucketid = bucketid;

            Projectid = projectid;

            Page = page;
            StartingAfter = startingAfter;
            PerPage = perPage;
            Path = path;
            Label = label;
            ContentType = contentType;
            Complete = complete;
            SortBy = sortBy;
            SortOrder = sortOrder;
            PathAndQueryParams = $"/api/ccd/management/v1/projects/{projectid}/buckets/{bucketid}/entries";

            List<string> queryParams = new List<string>();

            var pageStringValue = Page.ToString();
            queryParams = AddParamsToQueryParams(queryParams, "page", pageStringValue);
            if(StartingAfter != Guid.Empty)
            {
                queryParams = AddParamsToQueryParams(queryParams, "starting_after", StartingAfter);
            }
            var perPageStringValue = PerPage.ToString();
            queryParams = AddParamsToQueryParams(queryParams, "per_page", perPageStringValue);
            if(!string.IsNullOrEmpty(Path))
            {
                queryParams = AddParamsToQueryParams(queryParams, "path", Path);
            }
            if(!string.IsNullOrEmpty(Label))
            {
                queryParams = AddParamsToQueryParams(queryParams, "label", Label);
            }
            if(!string.IsNullOrEmpty(ContentType))
            {
                queryParams = AddParamsToQueryParams(queryParams, "content_type", ContentType);
            }
            var completeStringValue = Complete.ToString();
            queryParams = AddParamsToQueryParams(queryParams, "complete", completeStringValue);
            if(!string.IsNullOrEmpty(SortBy))
            {
                queryParams = AddParamsToQueryParams(queryParams, "sort_by", SortBy);
            }
            if(!string.IsNullOrEmpty(SortOrder))
            {
                queryParams = AddParamsToQueryParams(queryParams, "sort_order", SortOrder);
            }
            if (queryParams.Count > 0)
            {
                PathAndQueryParams = $"{PathAndQueryParams}?{string.Join("&", queryParams)}";
            }
        }

        /// <summary>
        /// Helper function for constructing URL from request base path and
        /// query params.
        /// </summary>
        /// <param name="requestBasePath"></param>
        /// <returns></returns>
        public string ConstructUrl(string requestBasePath)
        {
            return requestBasePath + PathAndQueryParams;
        }

        /// <summary>
        /// Helper for constructing the request body.
        /// </summary>
        /// <returns>A list of IMultipartFormSection representing the request body.</returns>
        public byte[] ConstructBody()
        {
            return null;
        }

        /// <summary>
        /// Helper function for constructing the headers.
        /// </summary>
        /// <param name="operationConfiguration">The operation configuration to use.</param>
        /// <returns>A dictionary representing the request headers.</returns>
        public Dictionary<string, string> ConstructHeaders(Configuration operationConfiguration = null)
        {
            var headers = new Dictionary<string, string>();

            // Analytics headers
            headers.Add("Unity-Client-Version", Application.unityVersion);
            headers.Add("Unity-Client-Mode", Scheduler.EngineStateHelper.IsPlaying ? "play" : "edit");

            string[] contentTypes = {
            };

            string[] accepts = {
                "application/json",
                "application/problem+json"
            };

            var acceptHeader = GenerateAcceptHeader(accepts);
            if (!string.IsNullOrEmpty(acceptHeader))
            {
                headers.Add("Accept", acceptHeader);
            }
            var httpMethod = "GET";
            var contentTypeHeader = GenerateContentTypeHeader(contentTypes);
            if (!string.IsNullOrEmpty(contentTypeHeader))
            {
                headers.Add("Content-Type", contentTypeHeader);
            }
            else if (httpMethod == "POST" || httpMethod == "PATCH")
            {
                headers.Add("Content-Type", "application/json");
            }


            // We also check if there are headers that are defined as part of
            // the request configuration.
            if (operationConfiguration != null && operationConfiguration.Headers != null)
            {
                foreach (var pair in operationConfiguration.Headers)
                {
                    headers[pair.Key] = pair.Value;
                }
            }

            return headers;
        }
    }
    /// <summary>
    /// GetEntriesEnvRequest
    /// Get entries for bucket
    /// </summary>
    [Preserve]
    internal class GetEntriesEnvRequest : EntriesApiBaseRequest
    {
        /// <summary>Accessor for environmentid </summary>
        [Preserve]
        public string Environmentid { get; }
        /// <summary>Accessor for bucketid </summary>
        [Preserve]
        public string Bucketid { get; }
        /// <summary>Accessor for projectid </summary>
        [Preserve]
        public string Projectid { get; }
        /// <summary>Accessor for page </summary>
        [Preserve]
        public int? Page { get; }
        /// <summary>Accessor for startingAfter </summary>
        [Preserve]
        public System.Guid StartingAfter { get; }
        /// <summary>Accessor for perPage </summary>
        [Preserve]
        public int? PerPage { get; }
        /// <summary>Accessor for path </summary>
        [Preserve]
        public string Path { get; }
        /// <summary>Accessor for label </summary>
        [Preserve]
        public string Label { get; }
        /// <summary>Accessor for contentType </summary>
        [Preserve]
        public string ContentType { get; }
        /// <summary>Accessor for complete </summary>
        [Preserve]
        public bool? Complete { get; }
        /// <summary>Accessor for sortBy </summary>
        [Preserve]
        public string SortBy { get; }
        /// <summary>Accessor for sortOrder </summary>
        [Preserve]
        public string SortOrder { get; }
        string PathAndQueryParams;

        /// <summary>
        /// GetEntriesEnv Request Object.
        /// Get entries for bucket
        /// </summary>
        /// <param name="environmentid">Environment ID</param>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="projectid">Project ID</param>
        /// <param name="page">Current Page</param>
        /// <param name="startingAfter">returns items listed after the named ID</param>
        /// <param name="perPage">Items Per Page</param>
        /// <param name="path">Path</param>
        /// <param name="label">Label</param>
        /// <param name="contentType">content type</param>
        /// <param name="complete">is content upload completed or not</param>
        /// <param name="sortBy">Sort By</param>
        /// <param name="sortOrder">Sort Order</param>
        [Preserve]
        public GetEntriesEnvRequest(string environmentid, string bucketid, string projectid, int? page = default(int?), System.Guid startingAfter = default(System.Guid), int? perPage = 10, string path = default(string), string label = default(string), string contentType = default(string), bool? complete = default(bool?), string sortBy = default(string), string sortOrder = default(string))
        {
            Environmentid = environmentid;

            Bucketid = bucketid;

            Projectid = projectid;

            Page = page;
            StartingAfter = startingAfter;
            PerPage = perPage;
            Path = path;
            Label = label;
            ContentType = contentType;
            Complete = complete;
            SortBy = sortBy;
            SortOrder = sortOrder;
            PathAndQueryParams = $"/api/ccd/management/v1/projects/{projectid}/environments/{environmentid}/buckets/{bucketid}/entries";

            List<string> queryParams = new List<string>();

            var pageStringValue = Page.ToString();
            queryParams = AddParamsToQueryParams(queryParams, "page", pageStringValue);
            if(StartingAfter != Guid.Empty)
            {
                queryParams = AddParamsToQueryParams(queryParams, "starting_after", StartingAfter);
            }
            var perPageStringValue = PerPage.ToString();
            queryParams = AddParamsToQueryParams(queryParams, "per_page", perPageStringValue);
            if(!string.IsNullOrEmpty(Path))
            {
                queryParams = AddParamsToQueryParams(queryParams, "path", Path);
            }
            if(!string.IsNullOrEmpty(Label))
            {
                queryParams = AddParamsToQueryParams(queryParams, "label", Label);
            }
            if(!string.IsNullOrEmpty(ContentType))
            {
                queryParams = AddParamsToQueryParams(queryParams, "content_type", ContentType);
            }
            var completeStringValue = Complete.ToString();
            queryParams = AddParamsToQueryParams(queryParams, "complete", completeStringValue);
            if(!string.IsNullOrEmpty(SortBy))
            {
                queryParams = AddParamsToQueryParams(queryParams, "sort_by", SortBy);
            }
            if(!string.IsNullOrEmpty(SortOrder))
            {
                queryParams = AddParamsToQueryParams(queryParams, "sort_order", SortOrder);
            }
            if (queryParams.Count > 0)
            {
                PathAndQueryParams = $"{PathAndQueryParams}?{string.Join("&", queryParams)}";
            }
        }

        /// <summary>
        /// Helper function for constructing URL from request base path and
        /// query params.
        /// </summary>
        /// <param name="requestBasePath"></param>
        /// <returns></returns>
        public string ConstructUrl(string requestBasePath)
        {
            return requestBasePath + PathAndQueryParams;
        }

        /// <summary>
        /// Helper for constructing the request body.
        /// </summary>
        /// <returns>A list of IMultipartFormSection representing the request body.</returns>
        public byte[] ConstructBody()
        {
            return null;
        }

        /// <summary>
        /// Helper function for constructing the headers.
        /// </summary>
        /// <param name="operationConfiguration">The operation configuration to use.</param>
        /// <returns>A dictionary representing the request headers.</returns>
        public Dictionary<string, string> ConstructHeaders(Configuration operationConfiguration = null)
        {
            var headers = new Dictionary<string, string>();

            // Analytics headers
            headers.Add("Unity-Client-Version", Application.unityVersion);
            headers.Add("Unity-Client-Mode", Scheduler.EngineStateHelper.IsPlaying ? "play" : "edit");

            string[] contentTypes = {
            };

            string[] accepts = {
                "application/json",
                "application/problem+json"
            };

            var acceptHeader = GenerateAcceptHeader(accepts);
            if (!string.IsNullOrEmpty(acceptHeader))
            {
                headers.Add("Accept", acceptHeader);
            }
            var httpMethod = "GET";
            var contentTypeHeader = GenerateContentTypeHeader(contentTypes);
            if (!string.IsNullOrEmpty(contentTypeHeader))
            {
                headers.Add("Content-Type", contentTypeHeader);
            }
            else if (httpMethod == "POST" || httpMethod == "PATCH")
            {
                headers.Add("Content-Type", "application/json");
            }


            // We also check if there are headers that are defined as part of
            // the request configuration.
            if (operationConfiguration != null && operationConfiguration.Headers != null)
            {
                foreach (var pair in operationConfiguration.Headers)
                {
                    headers[pair.Key] = pair.Value;
                }
            }

            return headers;
        }
    }
    /// <summary>
    /// GetEntryRequest
    /// Get entry
    /// </summary>
    [Preserve]
    internal class GetEntryRequest : EntriesApiBaseRequest
    {
        /// <summary>Accessor for bucketid </summary>
        [Preserve]
        public string Bucketid { get; }
        /// <summary>Accessor for entryid </summary>
        [Preserve]
        public string Entryid { get; }
        /// <summary>Accessor for projectid </summary>
        [Preserve]
        public string Projectid { get; }
        string PathAndQueryParams;

        /// <summary>
        /// GetEntry Request Object.
        /// Get entry
        /// </summary>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="entryid">Entry ID</param>
        /// <param name="projectid">Project ID</param>
        [Preserve]
        public GetEntryRequest(string bucketid, string entryid, string projectid)
        {
            Bucketid = bucketid;

            Entryid = entryid;

            Projectid = projectid;

            PathAndQueryParams = $"/api/ccd/management/v1/projects/{projectid}/buckets/{bucketid}/entries/{entryid}";


        }

        /// <summary>
        /// Helper function for constructing URL from request base path and
        /// query params.
        /// </summary>
        /// <param name="requestBasePath"></param>
        /// <returns></returns>
        public string ConstructUrl(string requestBasePath)
        {
            return requestBasePath + PathAndQueryParams;
        }

        /// <summary>
        /// Helper for constructing the request body.
        /// </summary>
        /// <returns>A list of IMultipartFormSection representing the request body.</returns>
        public byte[] ConstructBody()
        {
            return null;
        }

        /// <summary>
        /// Helper function for constructing the headers.
        /// </summary>
        /// <param name="operationConfiguration">The operation configuration to use.</param>
        /// <returns>A dictionary representing the request headers.</returns>
        public Dictionary<string, string> ConstructHeaders(Configuration operationConfiguration = null)
        {
            var headers = new Dictionary<string, string>();

            // Analytics headers
            headers.Add("Unity-Client-Version", Application.unityVersion);
            headers.Add("Unity-Client-Mode", Scheduler.EngineStateHelper.IsPlaying ? "play" : "edit");

            string[] contentTypes = {
            };

            string[] accepts = {
                "application/json",
                "application/problem+json"
            };

            var acceptHeader = GenerateAcceptHeader(accepts);
            if (!string.IsNullOrEmpty(acceptHeader))
            {
                headers.Add("Accept", acceptHeader);
            }
            var httpMethod = "GET";
            var contentTypeHeader = GenerateContentTypeHeader(contentTypes);
            if (!string.IsNullOrEmpty(contentTypeHeader))
            {
                headers.Add("Content-Type", contentTypeHeader);
            }
            else if (httpMethod == "POST" || httpMethod == "PATCH")
            {
                headers.Add("Content-Type", "application/json");
            }


            // We also check if there are headers that are defined as part of
            // the request configuration.
            if (operationConfiguration != null && operationConfiguration.Headers != null)
            {
                foreach (var pair in operationConfiguration.Headers)
                {
                    headers[pair.Key] = pair.Value;
                }
            }

            return headers;
        }
    }
    /// <summary>
    /// GetEntryByPathRequest
    /// Get entry by path
    /// </summary>
    [Preserve]
    internal class GetEntryByPathRequest : EntriesApiBaseRequest
    {
        /// <summary>Accessor for bucketid </summary>
        [Preserve]
        public string Bucketid { get; }
        /// <summary>Accessor for path </summary>
        [Preserve]
        public string Path { get; }
        /// <summary>Accessor for projectid </summary>
        [Preserve]
        public string Projectid { get; }
        /// <summary>Accessor for versionid </summary>
        [Preserve]
        public string Versionid { get; }
        string PathAndQueryParams;

        /// <summary>
        /// GetEntryByPath Request Object.
        /// Get entry by path
        /// </summary>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="path">Path</param>
        /// <param name="projectid">Project ID</param>
        /// <param name="versionid">Version ID</param>
        [Preserve]
        public GetEntryByPathRequest(string bucketid, string path, string projectid, string versionid = default(string))
        {
            Bucketid = bucketid;

            Path = path;
            Projectid = projectid;

            Versionid = versionid;
            PathAndQueryParams = $"/api/ccd/management/v1/projects/{projectid}/buckets/{bucketid}/entry_by_path";

            List<string> queryParams = new List<string>();

            if(!string.IsNullOrEmpty(Path))
            {
                queryParams = AddParamsToQueryParams(queryParams, "path", Path);
            }
            if(!string.IsNullOrEmpty(Versionid))
            {
                queryParams = AddParamsToQueryParams(queryParams, "versionid", Versionid);
            }
            if (queryParams.Count > 0)
            {
                PathAndQueryParams = $"{PathAndQueryParams}?{string.Join("&", queryParams)}";
            }
        }

        /// <summary>
        /// Helper function for constructing URL from request base path and
        /// query params.
        /// </summary>
        /// <param name="requestBasePath"></param>
        /// <returns></returns>
        public string ConstructUrl(string requestBasePath)
        {
            return requestBasePath + PathAndQueryParams;
        }

        /// <summary>
        /// Helper for constructing the request body.
        /// </summary>
        /// <returns>A list of IMultipartFormSection representing the request body.</returns>
        public byte[] ConstructBody()
        {
            return null;
        }

        /// <summary>
        /// Helper function for constructing the headers.
        /// </summary>
        /// <param name="operationConfiguration">The operation configuration to use.</param>
        /// <returns>A dictionary representing the request headers.</returns>
        public Dictionary<string, string> ConstructHeaders(Configuration operationConfiguration = null)
        {
            var headers = new Dictionary<string, string>();

            // Analytics headers
            headers.Add("Unity-Client-Version", Application.unityVersion);
            headers.Add("Unity-Client-Mode", Scheduler.EngineStateHelper.IsPlaying ? "play" : "edit");

            string[] contentTypes = {
            };

            string[] accepts = {
                "application/json",
                "application/problem+json"
            };

            var acceptHeader = GenerateAcceptHeader(accepts);
            if (!string.IsNullOrEmpty(acceptHeader))
            {
                headers.Add("Accept", acceptHeader);
            }
            var httpMethod = "GET";
            var contentTypeHeader = GenerateContentTypeHeader(contentTypes);
            if (!string.IsNullOrEmpty(contentTypeHeader))
            {
                headers.Add("Content-Type", contentTypeHeader);
            }
            else if (httpMethod == "POST" || httpMethod == "PATCH")
            {
                headers.Add("Content-Type", "application/json");
            }


            // We also check if there are headers that are defined as part of
            // the request configuration.
            if (operationConfiguration != null && operationConfiguration.Headers != null)
            {
                foreach (var pair in operationConfiguration.Headers)
                {
                    headers[pair.Key] = pair.Value;
                }
            }

            return headers;
        }
    }
    /// <summary>
    /// GetEntryByPathEnvRequest
    /// Get entry by path
    /// </summary>
    [Preserve]
    internal class GetEntryByPathEnvRequest : EntriesApiBaseRequest
    {
        /// <summary>Accessor for environmentid </summary>
        [Preserve]
        public string Environmentid { get; }
        /// <summary>Accessor for bucketid </summary>
        [Preserve]
        public string Bucketid { get; }
        /// <summary>Accessor for path </summary>
        [Preserve]
        public string Path { get; }
        /// <summary>Accessor for projectid </summary>
        [Preserve]
        public string Projectid { get; }
        /// <summary>Accessor for versionid </summary>
        [Preserve]
        public string Versionid { get; }
        string PathAndQueryParams;

        /// <summary>
        /// GetEntryByPathEnv Request Object.
        /// Get entry by path
        /// </summary>
        /// <param name="environmentid">Environment ID</param>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="path">Path</param>
        /// <param name="projectid">Project ID</param>
        /// <param name="versionid">Version ID</param>
        [Preserve]
        public GetEntryByPathEnvRequest(string environmentid, string bucketid, string path, string projectid, string versionid = default(string))
        {
            Environmentid = environmentid;

            Bucketid = bucketid;

            Path = path;
            Projectid = projectid;

            Versionid = versionid;
            PathAndQueryParams = $"/api/ccd/management/v1/projects/{projectid}/environments/{environmentid}/buckets/{bucketid}/entry_by_path";

            List<string> queryParams = new List<string>();

            if(!string.IsNullOrEmpty(Path))
            {
                queryParams = AddParamsToQueryParams(queryParams, "path", Path);
            }
            if(!string.IsNullOrEmpty(Versionid))
            {
                queryParams = AddParamsToQueryParams(queryParams, "versionid", Versionid);
            }
            if (queryParams.Count > 0)
            {
                PathAndQueryParams = $"{PathAndQueryParams}?{string.Join("&", queryParams)}";
            }
        }

        /// <summary>
        /// Helper function for constructing URL from request base path and
        /// query params.
        /// </summary>
        /// <param name="requestBasePath"></param>
        /// <returns></returns>
        public string ConstructUrl(string requestBasePath)
        {
            return requestBasePath + PathAndQueryParams;
        }

        /// <summary>
        /// Helper for constructing the request body.
        /// </summary>
        /// <returns>A list of IMultipartFormSection representing the request body.</returns>
        public byte[] ConstructBody()
        {
            return null;
        }

        /// <summary>
        /// Helper function for constructing the headers.
        /// </summary>
        /// <param name="operationConfiguration">The operation configuration to use.</param>
        /// <returns>A dictionary representing the request headers.</returns>
        public Dictionary<string, string> ConstructHeaders(Configuration operationConfiguration = null)
        {
            var headers = new Dictionary<string, string>();

            // Analytics headers
            headers.Add("Unity-Client-Version", Application.unityVersion);
            headers.Add("Unity-Client-Mode", Scheduler.EngineStateHelper.IsPlaying ? "play" : "edit");

            string[] contentTypes = {
            };

            string[] accepts = {
                "application/json",
                "application/problem+json"
            };

            var acceptHeader = GenerateAcceptHeader(accepts);
            if (!string.IsNullOrEmpty(acceptHeader))
            {
                headers.Add("Accept", acceptHeader);
            }
            var httpMethod = "GET";
            var contentTypeHeader = GenerateContentTypeHeader(contentTypes);
            if (!string.IsNullOrEmpty(contentTypeHeader))
            {
                headers.Add("Content-Type", contentTypeHeader);
            }
            else if (httpMethod == "POST" || httpMethod == "PATCH")
            {
                headers.Add("Content-Type", "application/json");
            }


            // We also check if there are headers that are defined as part of
            // the request configuration.
            if (operationConfiguration != null && operationConfiguration.Headers != null)
            {
                foreach (var pair in operationConfiguration.Headers)
                {
                    headers[pair.Key] = pair.Value;
                }
            }

            return headers;
        }
    }
    /// <summary>
    /// GetEntryEnvRequest
    /// Get entry
    /// </summary>
    [Preserve]
    internal class GetEntryEnvRequest : EntriesApiBaseRequest
    {
        /// <summary>Accessor for environmentid </summary>
        [Preserve]
        public string Environmentid { get; }
        /// <summary>Accessor for bucketid </summary>
        [Preserve]
        public string Bucketid { get; }
        /// <summary>Accessor for entryid </summary>
        [Preserve]
        public string Entryid { get; }
        /// <summary>Accessor for projectid </summary>
        [Preserve]
        public string Projectid { get; }
        string PathAndQueryParams;

        /// <summary>
        /// GetEntryEnv Request Object.
        /// Get entry
        /// </summary>
        /// <param name="environmentid">Environment ID</param>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="entryid">Entry ID</param>
        /// <param name="projectid">Project ID</param>
        [Preserve]
        public GetEntryEnvRequest(string environmentid, string bucketid, string entryid, string projectid)
        {
            Environmentid = environmentid;

            Bucketid = bucketid;

            Entryid = entryid;

            Projectid = projectid;

            PathAndQueryParams = $"/api/ccd/management/v1/projects/{projectid}/environments/{environmentid}/buckets/{bucketid}/entries/{entryid}";


        }

        /// <summary>
        /// Helper function for constructing URL from request base path and
        /// query params.
        /// </summary>
        /// <param name="requestBasePath"></param>
        /// <returns></returns>
        public string ConstructUrl(string requestBasePath)
        {
            return requestBasePath + PathAndQueryParams;
        }

        /// <summary>
        /// Helper for constructing the request body.
        /// </summary>
        /// <returns>A list of IMultipartFormSection representing the request body.</returns>
        public byte[] ConstructBody()
        {
            return null;
        }

        /// <summary>
        /// Helper function for constructing the headers.
        /// </summary>
        /// <param name="operationConfiguration">The operation configuration to use.</param>
        /// <returns>A dictionary representing the request headers.</returns>
        public Dictionary<string, string> ConstructHeaders(Configuration operationConfiguration = null)
        {
            var headers = new Dictionary<string, string>();

            // Analytics headers
            headers.Add("Unity-Client-Version", Application.unityVersion);
            headers.Add("Unity-Client-Mode", Scheduler.EngineStateHelper.IsPlaying ? "play" : "edit");

            string[] contentTypes = {
            };

            string[] accepts = {
                "application/json",
                "application/problem+json"
            };

            var acceptHeader = GenerateAcceptHeader(accepts);
            if (!string.IsNullOrEmpty(acceptHeader))
            {
                headers.Add("Accept", acceptHeader);
            }
            var httpMethod = "GET";
            var contentTypeHeader = GenerateContentTypeHeader(contentTypes);
            if (!string.IsNullOrEmpty(contentTypeHeader))
            {
                headers.Add("Content-Type", contentTypeHeader);
            }
            else if (httpMethod == "POST" || httpMethod == "PATCH")
            {
                headers.Add("Content-Type", "application/json");
            }


            // We also check if there are headers that are defined as part of
            // the request configuration.
            if (operationConfiguration != null && operationConfiguration.Headers != null)
            {
                foreach (var pair in operationConfiguration.Headers)
                {
                    headers[pair.Key] = pair.Value;
                }
            }

            return headers;
        }
    }
    /// <summary>
    /// GetEntryVersionRequest
    /// Get entry version
    /// </summary>
    [Preserve]
    internal class GetEntryVersionRequest : EntriesApiBaseRequest
    {
        /// <summary>Accessor for bucketid </summary>
        [Preserve]
        public string Bucketid { get; }
        /// <summary>Accessor for entryid </summary>
        [Preserve]
        public string Entryid { get; }
        /// <summary>Accessor for versionid </summary>
        [Preserve]
        public string Versionid { get; }
        /// <summary>Accessor for projectid </summary>
        [Preserve]
        public string Projectid { get; }
        string PathAndQueryParams;

        /// <summary>
        /// GetEntryVersion Request Object.
        /// Get entry version
        /// </summary>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="entryid">Entry ID</param>
        /// <param name="versionid">Version ID</param>
        /// <param name="projectid">Project ID</param>
        [Preserve]
        public GetEntryVersionRequest(string bucketid, string entryid, string versionid, string projectid)
        {
            Bucketid = bucketid;

            Entryid = entryid;

            Versionid = versionid;

            Projectid = projectid;

            PathAndQueryParams = $"/api/ccd/management/v1/projects/{projectid}/buckets/{bucketid}/entries/{entryid}/versions/{versionid}";


        }

        /// <summary>
        /// Helper function for constructing URL from request base path and
        /// query params.
        /// </summary>
        /// <param name="requestBasePath"></param>
        /// <returns></returns>
        public string ConstructUrl(string requestBasePath)
        {
            return requestBasePath + PathAndQueryParams;
        }

        /// <summary>
        /// Helper for constructing the request body.
        /// </summary>
        /// <returns>A list of IMultipartFormSection representing the request body.</returns>
        public byte[] ConstructBody()
        {
            return null;
        }

        /// <summary>
        /// Helper function for constructing the headers.
        /// </summary>
        /// <param name="operationConfiguration">The operation configuration to use.</param>
        /// <returns>A dictionary representing the request headers.</returns>
        public Dictionary<string, string> ConstructHeaders(Configuration operationConfiguration = null)
        {
            var headers = new Dictionary<string, string>();

            // Analytics headers
            headers.Add("Unity-Client-Version", Application.unityVersion);
            headers.Add("Unity-Client-Mode", Scheduler.EngineStateHelper.IsPlaying ? "play" : "edit");

            string[] contentTypes = {
            };

            string[] accepts = {
                "application/json",
                "application/problem+json"
            };

            var acceptHeader = GenerateAcceptHeader(accepts);
            if (!string.IsNullOrEmpty(acceptHeader))
            {
                headers.Add("Accept", acceptHeader);
            }
            var httpMethod = "GET";
            var contentTypeHeader = GenerateContentTypeHeader(contentTypes);
            if (!string.IsNullOrEmpty(contentTypeHeader))
            {
                headers.Add("Content-Type", contentTypeHeader);
            }
            else if (httpMethod == "POST" || httpMethod == "PATCH")
            {
                headers.Add("Content-Type", "application/json");
            }


            // We also check if there are headers that are defined as part of
            // the request configuration.
            if (operationConfiguration != null && operationConfiguration.Headers != null)
            {
                foreach (var pair in operationConfiguration.Headers)
                {
                    headers[pair.Key] = pair.Value;
                }
            }

            return headers;
        }
    }
    /// <summary>
    /// GetEntryVersionEnvRequest
    /// Get entry version
    /// </summary>
    [Preserve]
    internal class GetEntryVersionEnvRequest : EntriesApiBaseRequest
    {
        /// <summary>Accessor for environmentid </summary>
        [Preserve]
        public string Environmentid { get; }
        /// <summary>Accessor for bucketid </summary>
        [Preserve]
        public string Bucketid { get; }
        /// <summary>Accessor for entryid </summary>
        [Preserve]
        public string Entryid { get; }
        /// <summary>Accessor for versionid </summary>
        [Preserve]
        public string Versionid { get; }
        /// <summary>Accessor for projectid </summary>
        [Preserve]
        public string Projectid { get; }
        string PathAndQueryParams;

        /// <summary>
        /// GetEntryVersionEnv Request Object.
        /// Get entry version
        /// </summary>
        /// <param name="environmentid">Environment ID</param>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="entryid">Entry ID</param>
        /// <param name="versionid">Version ID</param>
        /// <param name="projectid">Project ID</param>
        [Preserve]
        public GetEntryVersionEnvRequest(string environmentid, string bucketid, string entryid, string versionid, string projectid)
        {
            Environmentid = environmentid;

            Bucketid = bucketid;

            Entryid = entryid;

            Versionid = versionid;

            Projectid = projectid;

            PathAndQueryParams = $"/api/ccd/management/v1/projects/{projectid}/environments/{environmentid}/buckets/{bucketid}/entries/{entryid}/versions/{versionid}";


        }

        /// <summary>
        /// Helper function for constructing URL from request base path and
        /// query params.
        /// </summary>
        /// <param name="requestBasePath"></param>
        /// <returns></returns>
        public string ConstructUrl(string requestBasePath)
        {
            return requestBasePath + PathAndQueryParams;
        }

        /// <summary>
        /// Helper for constructing the request body.
        /// </summary>
        /// <returns>A list of IMultipartFormSection representing the request body.</returns>
        public byte[] ConstructBody()
        {
            return null;
        }

        /// <summary>
        /// Helper function for constructing the headers.
        /// </summary>
        /// <param name="operationConfiguration">The operation configuration to use.</param>
        /// <returns>A dictionary representing the request headers.</returns>
        public Dictionary<string, string> ConstructHeaders(Configuration operationConfiguration = null)
        {
            var headers = new Dictionary<string, string>();

            // Analytics headers
            headers.Add("Unity-Client-Version", Application.unityVersion);
            headers.Add("Unity-Client-Mode", Scheduler.EngineStateHelper.IsPlaying ? "play" : "edit");

            string[] contentTypes = {
            };

            string[] accepts = {
                "application/json",
                "application/problem+json"
            };

            var acceptHeader = GenerateAcceptHeader(accepts);
            if (!string.IsNullOrEmpty(acceptHeader))
            {
                headers.Add("Accept", acceptHeader);
            }
            var httpMethod = "GET";
            var contentTypeHeader = GenerateContentTypeHeader(contentTypes);
            if (!string.IsNullOrEmpty(contentTypeHeader))
            {
                headers.Add("Content-Type", contentTypeHeader);
            }
            else if (httpMethod == "POST" || httpMethod == "PATCH")
            {
                headers.Add("Content-Type", "application/json");
            }


            // We also check if there are headers that are defined as part of
            // the request configuration.
            if (operationConfiguration != null && operationConfiguration.Headers != null)
            {
                foreach (var pair in operationConfiguration.Headers)
                {
                    headers[pair.Key] = pair.Value;
                }
            }

            return headers;
        }
    }
    /// <summary>
    /// GetEntryVersionsRequest
    /// Get entry versions
    /// </summary>
    [Preserve]
    internal class GetEntryVersionsRequest : EntriesApiBaseRequest
    {
        /// <summary>Accessor for bucketid </summary>
        [Preserve]
        public string Bucketid { get; }
        /// <summary>Accessor for entryid </summary>
        [Preserve]
        public string Entryid { get; }
        /// <summary>Accessor for projectid </summary>
        [Preserve]
        public string Projectid { get; }
        /// <summary>Accessor for label </summary>
        [Preserve]
        public string Label { get; }
        /// <summary>Accessor for page </summary>
        [Preserve]
        public int? Page { get; }
        /// <summary>Accessor for perPage </summary>
        [Preserve]
        public int? PerPage { get; }
        string PathAndQueryParams;

        /// <summary>
        /// GetEntryVersions Request Object.
        /// Get entry versions
        /// </summary>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="entryid">Entry ID</param>
        /// <param name="projectid">Project ID</param>
        /// <param name="label">Label</param>
        /// <param name="page">Current Page</param>
        /// <param name="perPage">Items Per Page</param>
        [Preserve]
        public GetEntryVersionsRequest(string bucketid, string entryid, string projectid, string label = default(string), int? page = default(int?), int? perPage = 10)
        {
            Bucketid = bucketid;

            Entryid = entryid;

            Projectid = projectid;

            Label = label;
            Page = page;
            PerPage = perPage;
            PathAndQueryParams = $"/api/ccd/management/v1/projects/{projectid}/buckets/{bucketid}/entries/{entryid}/versions";

            List<string> queryParams = new List<string>();

            if(!string.IsNullOrEmpty(Label))
            {
                queryParams = AddParamsToQueryParams(queryParams, "label", Label);
            }
            var pageStringValue = Page.ToString();
            queryParams = AddParamsToQueryParams(queryParams, "page", pageStringValue);
            var perPageStringValue = PerPage.ToString();
            queryParams = AddParamsToQueryParams(queryParams, "per_page", perPageStringValue);
            if (queryParams.Count > 0)
            {
                PathAndQueryParams = $"{PathAndQueryParams}?{string.Join("&", queryParams)}";
            }
        }

        /// <summary>
        /// Helper function for constructing URL from request base path and
        /// query params.
        /// </summary>
        /// <param name="requestBasePath"></param>
        /// <returns></returns>
        public string ConstructUrl(string requestBasePath)
        {
            return requestBasePath + PathAndQueryParams;
        }

        /// <summary>
        /// Helper for constructing the request body.
        /// </summary>
        /// <returns>A list of IMultipartFormSection representing the request body.</returns>
        public byte[] ConstructBody()
        {
            return null;
        }

        /// <summary>
        /// Helper function for constructing the headers.
        /// </summary>
        /// <param name="operationConfiguration">The operation configuration to use.</param>
        /// <returns>A dictionary representing the request headers.</returns>
        public Dictionary<string, string> ConstructHeaders(Configuration operationConfiguration = null)
        {
            var headers = new Dictionary<string, string>();

            // Analytics headers
            headers.Add("Unity-Client-Version", Application.unityVersion);
            headers.Add("Unity-Client-Mode", Scheduler.EngineStateHelper.IsPlaying ? "play" : "edit");

            string[] contentTypes = {
            };

            string[] accepts = {
                "application/json",
                "application/problem+json"
            };

            var acceptHeader = GenerateAcceptHeader(accepts);
            if (!string.IsNullOrEmpty(acceptHeader))
            {
                headers.Add("Accept", acceptHeader);
            }
            var httpMethod = "GET";
            var contentTypeHeader = GenerateContentTypeHeader(contentTypes);
            if (!string.IsNullOrEmpty(contentTypeHeader))
            {
                headers.Add("Content-Type", contentTypeHeader);
            }
            else if (httpMethod == "POST" || httpMethod == "PATCH")
            {
                headers.Add("Content-Type", "application/json");
            }


            // We also check if there are headers that are defined as part of
            // the request configuration.
            if (operationConfiguration != null && operationConfiguration.Headers != null)
            {
                foreach (var pair in operationConfiguration.Headers)
                {
                    headers[pair.Key] = pair.Value;
                }
            }

            return headers;
        }
    }
    /// <summary>
    /// GetEntryVersionsEnvRequest
    /// Get entry versions
    /// </summary>
    [Preserve]
    internal class GetEntryVersionsEnvRequest : EntriesApiBaseRequest
    {
        /// <summary>Accessor for environmentid </summary>
        [Preserve]
        public string Environmentid { get; }
        /// <summary>Accessor for bucketid </summary>
        [Preserve]
        public string Bucketid { get; }
        /// <summary>Accessor for entryid </summary>
        [Preserve]
        public string Entryid { get; }
        /// <summary>Accessor for projectid </summary>
        [Preserve]
        public string Projectid { get; }
        /// <summary>Accessor for label </summary>
        [Preserve]
        public string Label { get; }
        /// <summary>Accessor for page </summary>
        [Preserve]
        public int? Page { get; }
        /// <summary>Accessor for perPage </summary>
        [Preserve]
        public int? PerPage { get; }
        string PathAndQueryParams;

        /// <summary>
        /// GetEntryVersionsEnv Request Object.
        /// Get entry versions
        /// </summary>
        /// <param name="environmentid">Environment ID</param>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="entryid">Entry ID</param>
        /// <param name="projectid">Project ID</param>
        /// <param name="label">Label</param>
        /// <param name="page">Current Page</param>
        /// <param name="perPage">Items Per Page</param>
        [Preserve]
        public GetEntryVersionsEnvRequest(string environmentid, string bucketid, string entryid, string projectid, string label = default(string), int? page = default(int?), int? perPage = 10)
        {
            Environmentid = environmentid;

            Bucketid = bucketid;

            Entryid = entryid;

            Projectid = projectid;

            Label = label;
            Page = page;
            PerPage = perPage;
            PathAndQueryParams = $"/api/ccd/management/v1/projects/{projectid}/environments/{environmentid}/buckets/{bucketid}/entries/{entryid}/versions";

            List<string> queryParams = new List<string>();

            if(!string.IsNullOrEmpty(Label))
            {
                queryParams = AddParamsToQueryParams(queryParams, "label", Label);
            }
            var pageStringValue = Page.ToString();
            queryParams = AddParamsToQueryParams(queryParams, "page", pageStringValue);
            var perPageStringValue = PerPage.ToString();
            queryParams = AddParamsToQueryParams(queryParams, "per_page", perPageStringValue);
            if (queryParams.Count > 0)
            {
                PathAndQueryParams = $"{PathAndQueryParams}?{string.Join("&", queryParams)}";
            }
        }

        /// <summary>
        /// Helper function for constructing URL from request base path and
        /// query params.
        /// </summary>
        /// <param name="requestBasePath"></param>
        /// <returns></returns>
        public string ConstructUrl(string requestBasePath)
        {
            return requestBasePath + PathAndQueryParams;
        }

        /// <summary>
        /// Helper for constructing the request body.
        /// </summary>
        /// <returns>A list of IMultipartFormSection representing the request body.</returns>
        public byte[] ConstructBody()
        {
            return null;
        }

        /// <summary>
        /// Helper function for constructing the headers.
        /// </summary>
        /// <param name="operationConfiguration">The operation configuration to use.</param>
        /// <returns>A dictionary representing the request headers.</returns>
        public Dictionary<string, string> ConstructHeaders(Configuration operationConfiguration = null)
        {
            var headers = new Dictionary<string, string>();

            // Analytics headers
            headers.Add("Unity-Client-Version", Application.unityVersion);
            headers.Add("Unity-Client-Mode", Scheduler.EngineStateHelper.IsPlaying ? "play" : "edit");

            string[] contentTypes = {
            };

            string[] accepts = {
                "application/json",
                "application/problem+json"
            };

            var acceptHeader = GenerateAcceptHeader(accepts);
            if (!string.IsNullOrEmpty(acceptHeader))
            {
                headers.Add("Accept", acceptHeader);
            }
            var httpMethod = "GET";
            var contentTypeHeader = GenerateContentTypeHeader(contentTypes);
            if (!string.IsNullOrEmpty(contentTypeHeader))
            {
                headers.Add("Content-Type", contentTypeHeader);
            }
            else if (httpMethod == "POST" || httpMethod == "PATCH")
            {
                headers.Add("Content-Type", "application/json");
            }


            // We also check if there are headers that are defined as part of
            // the request configuration.
            if (operationConfiguration != null && operationConfiguration.Headers != null)
            {
                foreach (var pair in operationConfiguration.Headers)
                {
                    headers[pair.Key] = pair.Value;
                }
            }

            return headers;
        }
    }
    /// <summary>
    /// UpdateEntryRequest
    /// Update entry
    /// </summary>
    [Preserve]
    internal class UpdateEntryRequest : EntriesApiBaseRequest
    {
        /// <summary>Accessor for bucketid </summary>
        [Preserve]
        public string Bucketid { get; }
        /// <summary>Accessor for entryid </summary>
        [Preserve]
        public string Entryid { get; }
        /// <summary>Accessor for projectid </summary>
        [Preserve]
        public string Projectid { get; }
        /// <summary>Accessor for ccdEntryUpdate </summary>
        [Preserve]
        public Unity.Services.Ccd.Management.Models.CcdEntryUpdate CcdEntryUpdate { get; }
        string PathAndQueryParams;

        /// <summary>
        /// UpdateEntry Request Object.
        /// Update entry
        /// </summary>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="entryid">Entry ID</param>
        /// <param name="projectid">Project ID</param>
        /// <param name="ccdEntryUpdate">Entry</param>
        [Preserve]
        public UpdateEntryRequest(string bucketid, string entryid, string projectid, Unity.Services.Ccd.Management.Models.CcdEntryUpdate ccdEntryUpdate)
        {
            Bucketid = bucketid;

            Entryid = entryid;

            Projectid = projectid;

            CcdEntryUpdate = ccdEntryUpdate;
            PathAndQueryParams = $"/api/ccd/management/v1/projects/{projectid}/buckets/{bucketid}/entries/{entryid}";


        }

        /// <summary>
        /// Helper function for constructing URL from request base path and
        /// query params.
        /// </summary>
        /// <param name="requestBasePath"></param>
        /// <returns></returns>
        public string ConstructUrl(string requestBasePath)
        {
            return requestBasePath + PathAndQueryParams;
        }

        /// <summary>
        /// Helper for constructing the request body.
        /// </summary>
        /// <returns>A list of IMultipartFormSection representing the request body.</returns>
        public byte[] ConstructBody()
        {
            return ConstructBody(CcdEntryUpdate);
        }

        /// <summary>
        /// Helper function for constructing the headers.
        /// </summary>
        /// <param name="operationConfiguration">The operation configuration to use.</param>
        /// <returns>A dictionary representing the request headers.</returns>
        public Dictionary<string, string> ConstructHeaders(Configuration operationConfiguration = null)
        {
            var headers = new Dictionary<string, string>();

            // Analytics headers
            headers.Add("Unity-Client-Version", Application.unityVersion);
            headers.Add("Unity-Client-Mode", Scheduler.EngineStateHelper.IsPlaying ? "play" : "edit");

            string[] contentTypes = {
                "application/json"
            };

            string[] accepts = {
                "application/json",
                "application/problem+json"
            };

            var acceptHeader = GenerateAcceptHeader(accepts);
            if (!string.IsNullOrEmpty(acceptHeader))
            {
                headers.Add("Accept", acceptHeader);
            }
            var httpMethod = "PUT";
            var contentTypeHeader = GenerateContentTypeHeader(contentTypes);
            if (!string.IsNullOrEmpty(contentTypeHeader))
            {
                headers.Add("Content-Type", contentTypeHeader);
            }
            else if (httpMethod == "POST" || httpMethod == "PATCH")
            {
                headers.Add("Content-Type", "application/json");
            }


            // We also check if there are headers that are defined as part of
            // the request configuration.
            if (operationConfiguration != null && operationConfiguration.Headers != null)
            {
                foreach (var pair in operationConfiguration.Headers)
                {
                    headers[pair.Key] = pair.Value;
                }
            }

            return headers;
        }
    }
    /// <summary>
    /// UpdateEntryByPathRequest
    /// Update entry by path
    /// </summary>
    [Preserve]
    internal class UpdateEntryByPathRequest : EntriesApiBaseRequest
    {
        /// <summary>Accessor for bucketid </summary>
        [Preserve]
        public string Bucketid { get; }
        /// <summary>Accessor for path </summary>
        [Preserve]
        public string Path { get; }
        /// <summary>Accessor for projectid </summary>
        [Preserve]
        public string Projectid { get; }
        /// <summary>Accessor for ccdEntryUpdate </summary>
        [Preserve]
        public Unity.Services.Ccd.Management.Models.CcdEntryUpdate CcdEntryUpdate { get; }
        string PathAndQueryParams;

        /// <summary>
        /// UpdateEntryByPath Request Object.
        /// Update entry by path
        /// </summary>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="path">Path</param>
        /// <param name="projectid">Project ID</param>
        /// <param name="ccdEntryUpdate">Entry</param>
        [Preserve]
        public UpdateEntryByPathRequest(string bucketid, string path, string projectid, Unity.Services.Ccd.Management.Models.CcdEntryUpdate ccdEntryUpdate)
        {
            Bucketid = bucketid;

            Path = path;
            Projectid = projectid;

            CcdEntryUpdate = ccdEntryUpdate;
            PathAndQueryParams = $"/api/ccd/management/v1/projects/{projectid}/buckets/{bucketid}/entry_by_path";

            List<string> queryParams = new List<string>();

            if(!string.IsNullOrEmpty(Path))
            {
                queryParams = AddParamsToQueryParams(queryParams, "path", Path);
            }
            if (queryParams.Count > 0)
            {
                PathAndQueryParams = $"{PathAndQueryParams}?{string.Join("&", queryParams)}";
            }
        }

        /// <summary>
        /// Helper function for constructing URL from request base path and
        /// query params.
        /// </summary>
        /// <param name="requestBasePath"></param>
        /// <returns></returns>
        public string ConstructUrl(string requestBasePath)
        {
            return requestBasePath + PathAndQueryParams;
        }

        /// <summary>
        /// Helper for constructing the request body.
        /// </summary>
        /// <returns>A list of IMultipartFormSection representing the request body.</returns>
        public byte[] ConstructBody()
        {
            return ConstructBody(CcdEntryUpdate);
        }

        /// <summary>
        /// Helper function for constructing the headers.
        /// </summary>
        /// <param name="operationConfiguration">The operation configuration to use.</param>
        /// <returns>A dictionary representing the request headers.</returns>
        public Dictionary<string, string> ConstructHeaders(Configuration operationConfiguration = null)
        {
            var headers = new Dictionary<string, string>();

            // Analytics headers
            headers.Add("Unity-Client-Version", Application.unityVersion);
            headers.Add("Unity-Client-Mode", Scheduler.EngineStateHelper.IsPlaying ? "play" : "edit");

            string[] contentTypes = {
                "application/json"
            };

            string[] accepts = {
                "application/json",
                "application/problem+json"
            };

            var acceptHeader = GenerateAcceptHeader(accepts);
            if (!string.IsNullOrEmpty(acceptHeader))
            {
                headers.Add("Accept", acceptHeader);
            }
            var httpMethod = "PUT";
            var contentTypeHeader = GenerateContentTypeHeader(contentTypes);
            if (!string.IsNullOrEmpty(contentTypeHeader))
            {
                headers.Add("Content-Type", contentTypeHeader);
            }
            else if (httpMethod == "POST" || httpMethod == "PATCH")
            {
                headers.Add("Content-Type", "application/json");
            }


            // We also check if there are headers that are defined as part of
            // the request configuration.
            if (operationConfiguration != null && operationConfiguration.Headers != null)
            {
                foreach (var pair in operationConfiguration.Headers)
                {
                    headers[pair.Key] = pair.Value;
                }
            }

            return headers;
        }
    }
    /// <summary>
    /// UpdateEntryByPathEnvRequest
    /// Update entry by path
    /// </summary>
    [Preserve]
    internal class UpdateEntryByPathEnvRequest : EntriesApiBaseRequest
    {
        /// <summary>Accessor for environmentid </summary>
        [Preserve]
        public string Environmentid { get; }
        /// <summary>Accessor for bucketid </summary>
        [Preserve]
        public string Bucketid { get; }
        /// <summary>Accessor for path </summary>
        [Preserve]
        public string Path { get; }
        /// <summary>Accessor for projectid </summary>
        [Preserve]
        public string Projectid { get; }
        /// <summary>Accessor for ccdEntryUpdate </summary>
        [Preserve]
        public Unity.Services.Ccd.Management.Models.CcdEntryUpdate CcdEntryUpdate { get; }
        string PathAndQueryParams;

        /// <summary>
        /// UpdateEntryByPathEnv Request Object.
        /// Update entry by path
        /// </summary>
        /// <param name="environmentid">Environment ID</param>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="path">Path</param>
        /// <param name="projectid">Project ID</param>
        /// <param name="ccdEntryUpdate">Entry</param>
        [Preserve]
        public UpdateEntryByPathEnvRequest(string environmentid, string bucketid, string path, string projectid, Unity.Services.Ccd.Management.Models.CcdEntryUpdate ccdEntryUpdate)
        {
            Environmentid = environmentid;

            Bucketid = bucketid;

            Path = path;
            Projectid = projectid;

            CcdEntryUpdate = ccdEntryUpdate;
            PathAndQueryParams = $"/api/ccd/management/v1/projects/{projectid}/environments/{environmentid}/buckets/{bucketid}/entry_by_path";

            List<string> queryParams = new List<string>();

            if(!string.IsNullOrEmpty(Path))
            {
                queryParams = AddParamsToQueryParams(queryParams, "path", Path);
            }
            if (queryParams.Count > 0)
            {
                PathAndQueryParams = $"{PathAndQueryParams}?{string.Join("&", queryParams)}";
            }
        }

        /// <summary>
        /// Helper function for constructing URL from request base path and
        /// query params.
        /// </summary>
        /// <param name="requestBasePath"></param>
        /// <returns></returns>
        public string ConstructUrl(string requestBasePath)
        {
            return requestBasePath + PathAndQueryParams;
        }

        /// <summary>
        /// Helper for constructing the request body.
        /// </summary>
        /// <returns>A list of IMultipartFormSection representing the request body.</returns>
        public byte[] ConstructBody()
        {
            return ConstructBody(CcdEntryUpdate);
        }

        /// <summary>
        /// Helper function for constructing the headers.
        /// </summary>
        /// <param name="operationConfiguration">The operation configuration to use.</param>
        /// <returns>A dictionary representing the request headers.</returns>
        public Dictionary<string, string> ConstructHeaders(Configuration operationConfiguration = null)
        {
            var headers = new Dictionary<string, string>();

            // Analytics headers
            headers.Add("Unity-Client-Version", Application.unityVersion);
            headers.Add("Unity-Client-Mode", Scheduler.EngineStateHelper.IsPlaying ? "play" : "edit");

            string[] contentTypes = {
                "application/json"
            };

            string[] accepts = {
                "application/json",
                "application/problem+json"
            };

            var acceptHeader = GenerateAcceptHeader(accepts);
            if (!string.IsNullOrEmpty(acceptHeader))
            {
                headers.Add("Accept", acceptHeader);
            }
            var httpMethod = "PUT";
            var contentTypeHeader = GenerateContentTypeHeader(contentTypes);
            if (!string.IsNullOrEmpty(contentTypeHeader))
            {
                headers.Add("Content-Type", contentTypeHeader);
            }
            else if (httpMethod == "POST" || httpMethod == "PATCH")
            {
                headers.Add("Content-Type", "application/json");
            }


            // We also check if there are headers that are defined as part of
            // the request configuration.
            if (operationConfiguration != null && operationConfiguration.Headers != null)
            {
                foreach (var pair in operationConfiguration.Headers)
                {
                    headers[pair.Key] = pair.Value;
                }
            }

            return headers;
        }
    }
    /// <summary>
    /// UpdateEntryEnvRequest
    /// Update entry
    /// </summary>
    [Preserve]
    internal class UpdateEntryEnvRequest : EntriesApiBaseRequest
    {
        /// <summary>Accessor for environmentid </summary>
        [Preserve]
        public string Environmentid { get; }
        /// <summary>Accessor for bucketid </summary>
        [Preserve]
        public string Bucketid { get; }
        /// <summary>Accessor for entryid </summary>
        [Preserve]
        public string Entryid { get; }
        /// <summary>Accessor for projectid </summary>
        [Preserve]
        public string Projectid { get; }
        /// <summary>Accessor for ccdEntryUpdate </summary>
        [Preserve]
        public Unity.Services.Ccd.Management.Models.CcdEntryUpdate CcdEntryUpdate { get; }
        string PathAndQueryParams;

        /// <summary>
        /// UpdateEntryEnv Request Object.
        /// Update entry
        /// </summary>
        /// <param name="environmentid">Environment ID</param>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="entryid">Entry ID</param>
        /// <param name="projectid">Project ID</param>
        /// <param name="ccdEntryUpdate">Entry</param>
        [Preserve]
        public UpdateEntryEnvRequest(string environmentid, string bucketid, string entryid, string projectid, Unity.Services.Ccd.Management.Models.CcdEntryUpdate ccdEntryUpdate)
        {
            Environmentid = environmentid;

            Bucketid = bucketid;

            Entryid = entryid;

            Projectid = projectid;

            CcdEntryUpdate = ccdEntryUpdate;
            PathAndQueryParams = $"/api/ccd/management/v1/projects/{projectid}/environments/{environmentid}/buckets/{bucketid}/entries/{entryid}";


        }

        /// <summary>
        /// Helper function for constructing URL from request base path and
        /// query params.
        /// </summary>
        /// <param name="requestBasePath"></param>
        /// <returns></returns>
        public string ConstructUrl(string requestBasePath)
        {
            return requestBasePath + PathAndQueryParams;
        }

        /// <summary>
        /// Helper for constructing the request body.
        /// </summary>
        /// <returns>A list of IMultipartFormSection representing the request body.</returns>
        public byte[] ConstructBody()
        {
            return ConstructBody(CcdEntryUpdate);
        }

        /// <summary>
        /// Helper function for constructing the headers.
        /// </summary>
        /// <param name="operationConfiguration">The operation configuration to use.</param>
        /// <returns>A dictionary representing the request headers.</returns>
        public Dictionary<string, string> ConstructHeaders(Configuration operationConfiguration = null)
        {
            var headers = new Dictionary<string, string>();

            // Analytics headers
            headers.Add("Unity-Client-Version", Application.unityVersion);
            headers.Add("Unity-Client-Mode", Scheduler.EngineStateHelper.IsPlaying ? "play" : "edit");

            string[] contentTypes = {
                "application/json"
            };

            string[] accepts = {
                "application/json",
                "application/problem+json"
            };

            var acceptHeader = GenerateAcceptHeader(accepts);
            if (!string.IsNullOrEmpty(acceptHeader))
            {
                headers.Add("Accept", acceptHeader);
            }
            var httpMethod = "PUT";
            var contentTypeHeader = GenerateContentTypeHeader(contentTypes);
            if (!string.IsNullOrEmpty(contentTypeHeader))
            {
                headers.Add("Content-Type", contentTypeHeader);
            }
            else if (httpMethod == "POST" || httpMethod == "PATCH")
            {
                headers.Add("Content-Type", "application/json");
            }


            // We also check if there are headers that are defined as part of
            // the request configuration.
            if (operationConfiguration != null && operationConfiguration.Headers != null)
            {
                foreach (var pair in operationConfiguration.Headers)
                {
                    headers[pair.Key] = pair.Value;
                }
            }

            return headers;
        }
    }
}
