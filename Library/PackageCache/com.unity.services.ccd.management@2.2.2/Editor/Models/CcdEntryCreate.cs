//-----------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by the C# SDK Code Generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Linq;
using UnityEngine.Scripting;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Unity.Services.Ccd.Management.Http;



namespace Unity.Services.Ccd.Management.Models
{
    /// <summary>
    /// CcdEntryCreate model
    /// </summary>
    [Preserve]
    [DataContract(Name = "ccd.entryCreate")]
    public class CcdEntryCreate
    {
        /// <summary>
        /// Creates an instance of CcdEntryCreate.
        /// </summary>
        /// <param name="path">path param</param>
        /// <param name="contentHash">The \&quot;content_hash\&quot; should be MD5sum hash value.</param>
        /// <param name="contentSize">contentSize param</param>
        /// <param name="contentType">contentType param</param>
        /// <param name="labels">labels param</param>
        /// <param name="metadata">metadata param</param>
        /// <param name="signedUrl">Set to &#39;true&#39; if you want to return a signed URL for direct upload. Otherwise defaults to &#39;false&#39;.</param>
        [Preserve]
        public CcdEntryCreate(string path, string contentHash = default, int contentSize = default, string contentType = default, List<string> labels = default, object metadata = default, bool signedUrl = default)
        {
            ContentHash = contentHash;
            ContentSize = contentSize;
            ContentType = contentType;
            Labels = labels;
            Metadata = (JsonObject) JsonObject.GetNewJsonObjectResponse(metadata);
            Path = path;
            SignedUrl = signedUrl;
        }

        /// <summary>
        /// The \&quot;content_hash\&quot; should be MD5sum hash value.
        /// </summary>
        [Preserve]
        [DataMember(Name = "content_hash", EmitDefaultValue = false)]
        public string ContentHash{ get; }
        
        /// <summary>
        /// Parameter content_size of CcdEntryCreate
        /// </summary>
        [Preserve]
        [DataMember(Name = "content_size", EmitDefaultValue = false)]
        public int ContentSize{ get; }
        
        /// <summary>
        /// Parameter content_type of CcdEntryCreate
        /// </summary>
        [Preserve]
        [DataMember(Name = "content_type", EmitDefaultValue = false)]
        public string ContentType{ get; }
        
        /// <summary>
        /// Parameter labels of CcdEntryCreate
        /// </summary>
        [Preserve]
        [DataMember(Name = "labels", EmitDefaultValue = false)]
        public List<string> Labels{ get; }
        
        /// <summary>
        /// Parameter metadata of CcdEntryCreate
        /// </summary>
        [Preserve][JsonConverter(typeof(JsonObjectConverter))]
        [DataMember(Name = "metadata", EmitDefaultValue = false)]
        public JsonObject Metadata{ get; }
        
        /// <summary>
        /// Parameter path of CcdEntryCreate
        /// </summary>
        [Preserve]
        [DataMember(Name = "path", IsRequired = true, EmitDefaultValue = true)]
        public string Path{ get; }
        
        /// <summary>
        /// Set to &#39;true&#39; if you want to return a signed URL for direct upload. Otherwise defaults to &#39;false&#39;.
        /// </summary>
        [Preserve]
        [DataMember(Name = "signed_url", EmitDefaultValue = true)]
        public bool SignedUrl{ get; }
    
        /// <summary>
        /// Formats a CcdEntryCreate into a string of key-value pairs for use as a path parameter.
        /// </summary>
        /// <returns>Returns a string representation of the key-value pairs.</returns>
        internal string SerializeAsPathParam()
        {
            var serializedModel = "";

            if (ContentHash != null)
            {
                serializedModel += "content_hash," + ContentHash + ",";
            }
            serializedModel += "content_size," + ContentSize.ToString() + ",";
            if (ContentType != null)
            {
                serializedModel += "content_type," + ContentType + ",";
            }
            if (Labels != null)
            {
                serializedModel += "labels," + Labels.ToString() + ",";
            }
            if (Metadata != null)
            {
                serializedModel += "metadata," + Metadata.ToString() + ",";
            }
            if (Path != null)
            {
                serializedModel += "path," + Path + ",";
            }
            serializedModel += "signed_url," + SignedUrl.ToString();
            return serializedModel;
        }

        /// <summary>
        /// Returns a CcdEntryCreate as a dictionary of key-value pairs for use as a query parameter.
        /// </summary>
        /// <returns>Returns a dictionary of string key-value pairs.</returns>
        internal Dictionary<string, string> GetAsQueryParam()
        {
            var dictionary = new Dictionary<string, string>();

            if (ContentHash != null)
            {
                var content_hashStringValue = ContentHash.ToString();
                dictionary.Add("content_hash", content_hashStringValue);
            }
            
            var content_sizeStringValue = ContentSize.ToString();
            dictionary.Add("content_size", content_sizeStringValue);
            
            if (ContentType != null)
            {
                var content_typeStringValue = ContentType.ToString();
                dictionary.Add("content_type", content_typeStringValue);
            }
            
            if (Labels != null)
            {
                var labelsStringValue = Labels.ToString();
                dictionary.Add("labels", labelsStringValue);
            }
            
            if (Path != null)
            {
                var pathStringValue = Path.ToString();
                dictionary.Add("path", pathStringValue);
            }
            
            var signed_urlStringValue = SignedUrl.ToString();
            dictionary.Add("signed_url", signed_urlStringValue);
            
            return dictionary;
        }
    }
}
